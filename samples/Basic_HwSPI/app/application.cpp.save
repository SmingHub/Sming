#include <user_config.h>
#include <SmingCore/SmingCore.h>

//#include <Libraries/Adafruit_ST7735/Adafruit_ST7735.h>
#include <SmingCore/HardwareSPI.h>

#include <Libraries/ArduCAM/ArduCAM.h>
#include <Libraries/ArduCAM/ov2640_regs.h>

#include "HexDump.h"

/*
 * Hardware SPI mode:
 * GND      (GND)         GND
 * VCC      (VCC)         3.3v
 * D0       (CLK)         GPIO14
 * D1       (MOSI)        GPIO13
 * RES      (RESET)       GPIO16
 * DC       (DC)          GPIO0
 * CS       (CS)          GPIO2
 */
#define SPI_SCLK 	14
#define SPI_MOSI 	13
#define SPI_MISO 	12
//#define TFT_RST  	16
//#define TFT_DC   	0
//#define TFT_CS   	2
//#define SD_CS		4
#define CAM_CS		16

#define CAM_SCL		5
#define CAM_SDA		4

Timer DemoScreenTimer;
float p = 3.1415926;
uint32_t startTime;

ArduCAM myCAM(OV2640,CAM_CS);



void initCam() {
	uint8_t vid,pid = 0;

	Serial.printf("ArduCAM init!");

	// initialize I2C
	Wire.pins(CAM_SCL, CAM_SDA);
	Wire.begin();

	//Check if the camera module type is OV2640
	myCAM.rdSensorReg8_8(OV2640_CHIPID_HIGH, &vid);
	myCAM.rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);
	if((vid != 0x26) || (pid != 0x42)) {
		Serial.println("Can't find OV2640 module!");
		Serial.printf("vid = [%X]  pid = [%X]\n", vid, pid);
	}
	else
	  	Serial.println("OV2640 detected");

	// initialize SPI:
	HwSPI.begin();
	HwSPI.setCS(CAM_CS);

	//Check if the ArduCAM SPI bus is OK
	myCAM.write_reg(ARDUCHIP_TEST1, 0x57);

	uint8_t temp = myCAM.read_reg(ARDUCHIP_TEST1);
	if (temp != 0x57) {
		Serial.println("SPI interface Error!");
		while (1);
	} else {
		Serial.println("SPI interface OK!");
	}

	// init CAM
	Serial.println("Initialize the OV2640 module");
	myCAM.InitCAM();
}

/*
 * change cammera seeting -> used by ArduCammCommand handler
 */

void setupCam() {
	//Change MCU mode
	Serial.println("setupCamera -> Change MCU mode");
	myCAM.write_reg(ARDUCHIP_MODE, 0x01);
	Serial.printf("   ImageType -> %s\n", "BMP");
	myCAM.set_format(JPEG);
//	Serial.printf("   ImageSize -> %s\n","OV2640_160x120");
//    myCAM.OV2640_set_JPEG_size(OV2640_160x120);
}

void startCapture(){
  Serial.printf("startCapture()\n");
  myCAM.clear_fifo_flag();
  myCAM.start_capture();
}

uint16 getFifoLenght()
{
	uint32 len = 0;
	// wait for available data
	for (int i=0; i<100; i++) {
		debugf("ArduCAMStream::dataReady() read 0x41 0x00\n", len);
		if (myCAM.get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK)) {
			debugf("ArduCAMStream::dataReady() -> read 0x41 0x01 \n", len);
			len = myCAM.read_fifo_length();
			debugf("ArduCAMStream::getFifoLenght() -> %d bytes \n", len);
			return len;
		}
		delay(10);
	};
	debugf("ArduCAMStream::dataReady() -> no Data Available\n");
	return false;
}

void readFifoBirst(uint16 len) {

	#define BUFSIZE		1024
	#define BLOCKSIZE   64

	HexDump hdump;

	char data[1024];

	debugf("readFifoBirst\n");

	char dummy;

	HwSPI.startTX();
	myCAM.set_fifo_burst();

	// clear dummy byte -> send out LO and ignore MISO
	HwSPI.send((uint8)0x0);
//	HwSPI.recv((uint8_t *)&dummy, 1);

	// first loop split up in Buffers
	int blocks = ((len -1)/BUFSIZE) + 1;
	debugf("Reading total [%d] blocks of total [%d] bytes\n", blocks, len);

//	for (int i=0; i< blocks; i++) {
	for (int i=0; i< 3; i++) {
		HwSPI.recv((uint8_t *)data, BUFSIZE);
		hdump.print((uint8_t *)data, BUFSIZE);
		debugf("Block [%d] read operation: %d ms", i, millis() - startTime);
	}

	HwSPI.endTX();


}

void cam_test() {

	HwSPI.begin(HSPI);
	HwSPI.setCS(CAM_CS);

#define ARDUCHIP_TEST1 0x00

	HwSPI.startTX();
	// trigger the Logic analizer
	HwSPI.send(0xFF);
	HwSPI.endTX();

	HwSPI.startTX();
	HwSPI.spi_transaction(HSPI, 8, (uint16) ARDUCHIP_TEST1 | 0x80,
						 0, 0, 8, (uint32) 0x57,
						 0, 0);
	HwSPI.endTX();

	uint8 value = 0;

	HwSPI.startTX();
	value = (uint8) HwSPI.spi_transaction(HSPI, 8, (uint16) ARDUCHIP_TEST1 & 0x7ff,
						 0, 0, 0, 0,
						 8, 0);
	HwSPI.endTX();

	debugf("Return Value = [0x%02x]\n", value);

	initCam();

	debugf("clear_fifo_flag : 0x84 0x01");
	myCAM.clear_fifo_flag();
	debugf("clear_fifo_flag : 0x84 0x02");
	myCAM.start_capture();

	debugf("getFifoLenght : 0x42 0x43 0x44");
	uint16 len = getFifoLenght();

	debugf("readFifoBurst\n");
	char dummy;

	HwSPI.startTX();
	myCAM.set_fifo_burst();

	// clear dummy byte -> send out LO and ignore MISO
	HwSPI.send((uint8)0x0);

	HexDump hdump;
	char data[1024];

	// let's read the first 64 OK, 128 OK, 256 OK, 512 NOK !!!
	HwSPI.recv((uint8_t *)data, 1024);
	hdump.print((uint8_t *)data, 1024);

	HwSPI.endTX();


}



void cam_lib_test () {

	initCam();

//	setupCam();

	startCapture();

	uint16 len = getFifoLenght();

	readFifoBirst(len);

}

void spi_test() {

	debugf("Call SPI Init");

	pinMode(CAM_CS, OUTPUT);
	digitalWrite(CAM_CS, HIGH);

	HwSPI.begin(HSPI);
	HwSPI.setCS(CAM_CS);

	// 6 MHz  5, 3
	// 4 Mhz  8, 2
	// HwSPI.spi_clock(HSPI, 8, 2);
	debugf("Send Data");


	// set CS on PIN 16
	startTime = millis();
	HwSPI.setCS(0);
	digitalWrite(CAM_CS, LOW);

	HwSPI.spi_tx8(HSPI, '1');
	HwSPI.spi_tx8(HSPI,'3');
	HwSPI.spi_tx8(HSPI, '4');
	HwSPI.spi_tx16(HSPI, 0xabcd);
	HwSPI.spi_tx8(HSPI, '5');
	HwSPI.spi_tx32(HSPI, 0xABCDef01);

	// delay depends on -> clock-speed + bit size
	// 8 uSec for 4 Mhz 32 bit
	delayMicroseconds(8);
	digitalWrite(CAM_CS, HIGH);
	debugf("External set CS: %d ms", millis() - startTime);

	startTime = millis();
	HwSPI.setCS(CAM_CS);
	HwSPI.spi_tx8(HSPI, '1');
	HwSPI.spi_tx8(HSPI, '3');
	HwSPI.spi_tx8(HSPI, '4');
	HwSPI.spi_tx16(HSPI, 0xabcd);
	HwSPI.spi_tx8(HSPI, '5');
	HwSPI.spi_tx32(HSPI, 0xABCDef02);
	debugf("Library controlled CS: %d ms", millis() - startTime);



	uint8 out[] = { 'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '\0' };

	startTime = millis();
	HwSPI.setCS(CAM_CS);
	HwSPI.enable();
	HwSPI.send(out, 5);
	HwSPI.disable();
	debugf("External set library controlled CS: %d ms", millis() - startTime);

	HwSPI.enable();
	HwSPI.send(out, 12);
	HwSPI.disable();

	// ext CS
	startTime = millis();
	digitalWrite(CAM_CS, LOW);
	HwSPI.send(out, 12);
	delayMicroseconds(5);
	digitalWrite(CAM_CS, HIGH);
	debugf("External set wrong delayed CS: %d ms", millis() - startTime);


	startTime = millis();
	String str = "Hello SPI World, This is a real long data packet that should split up in multiple packets of 64 bytes World, This is a real long data packet that should split up in multiple packets of 64 bytes ";

	debugf("[%d] %s", 64, str.c_str());
	HwSPI.enable();
	HwSPI.send((uint8 *)str.c_str(), 64);
	HwSPI.disable();
	debugf("Single block write: %d ms", millis() - startTime);


	debugf("[%d] %s", str.length(), str.c_str());
	HwSPI.enable();
	HwSPI.send((uint8 *)str.c_str(), str.length());
	HwSPI.disable();
	debugf("Multiple block write: %d ms", millis() - startTime);


	debugf("Done start");

}



void init()
{

	Serial.begin(SERIAL_BAUD_RATE); // 115200 by default
	Serial.systemDebugOutput(true); // Allow debug output to serial

	//WifiStation.config(WIFI_SSID, WIFI_PWD);
	WifiStation.enable(false);
	WifiAccessPoint.enable(false);

//	display_test();

//	spi_test();

	cam_test();

//	cam_lib_test();

}
