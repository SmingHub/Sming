diff --git a/src/umm_malloc_cfg.h b/src/umm_malloc_cfg.h
index 6a5a7fc..a581100 100644
--- a/src/umm_malloc_cfg.h
+++ b/src/umm_malloc_cfg.h
@@ -5,6 +5,24 @@
 #ifndef _UMM_MALLOC_CFG_H
 #define _UMM_MALLOC_CFG_H
 
+#include <c_types.h>
+#include <m_printf.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+// ESP specific code
+extern void ets_intr_lock();
+extern void ets_intr_unlock();
+
+#ifdef UMM_MALLOC_H
+#define printf m_printf
+#define puts m_puts
+#endif
+
+#define ICACHE_FLASH_ATTR __attribute__((section(".irom0.text")))
+
 /*
  * There are a number of defines you can set at compile time that affect how
  * the memory allocator will operate.
@@ -39,11 +57,11 @@
  * ----------------------------------------------------------------------------
  */
 
-extern char test_umm_heap[];
+extern char _heap_start;
 
 /* Start addresses and the size of the heap */
-#define UMM_MALLOC_CFG_HEAP_ADDR (test_umm_heap)
-#define UMM_MALLOC_CFG_HEAP_SIZE 0x10000
+#define UMM_MALLOC_CFG_HEAP_ADDR ((uint32_t)&_heap_start)
+#define UMM_MALLOC_CFG_HEAP_SIZE ((size_t)(0x3fffc000 - UMM_MALLOC_CFG_HEAP_ADDR))
 
 /* A couple of macros to make packing structures less compiler dependent */
 
@@ -95,8 +113,8 @@ extern char test_umm_heap[];
  * called from within umm_malloc()
  */
 
-#define UMM_CRITICAL_ENTRY()
-#define UMM_CRITICAL_EXIT()
+#define UMM_CRITICAL_ENTRY() ets_intr_lock()
+#define UMM_CRITICAL_EXIT()  ets_intr_unlock()
 
 /*
  * -D UMM_INTEGRITY_CHECK :
@@ -151,11 +169,11 @@ extern char test_umm_heap[];
  * callback is called: `UMM_HEAP_CORRUPTION_CB()`
  */
 
-#define UMM_POISON_CHECK
+// #define UMM_POISON_CHECK
 
 #define UMM_POISON_SIZE_BEFORE 4
 #define UMM_POISON_SIZE_AFTER 4
-#define UMM_POISONED_BLOCK_LEN_TYPE short
+#define UMM_POISONED_BLOCK_LEN_TYPE uint32_t
 
 #ifdef UMM_POISON_CHECK
    void *umm_poison_malloc( size_t size );
@@ -168,4 +186,10 @@ extern char test_umm_heap[];
 #  define POISON_CHECK() 0
 #endif
 
+// #define UMM_HEAP_CORRUPTION_CB() panic()
+
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _UMM_MALLOC_CFG_H */
