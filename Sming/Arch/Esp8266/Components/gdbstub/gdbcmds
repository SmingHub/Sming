# Enable this if you want to log all traffic between GDB and the stub
#set remotelogfile gdb_rsp_logfile.txt

# ESP8266 HW limits the number of breakpoints/watchpoints
set remote hardware-breakpoint-limit 1
set remote hardware-watchpoint-limit 1

# Enable the 'system' syscall
set remote system-call-allowed 1

# Some GDBstub settings
set remote interrupt-on-connect on
set remote kill-packet off
set remote symbol-lookup-packet off
set remote verbose-resume-packet off

# The memory map, so GDB knows where it can install SW breakpoints
mem 0x20000000 0x3fefffff ro cache
mem 0x3ff00000 0x3fffffff rw
mem 0x40000000 0x400fffff ro cache
mem 0x40100000 0x4013ffff rw cache
mem 0x40140000 0x5fffffff ro cache
mem 0x60000000 0x60001fff rw

# The target object file so GDB knows where to get symbol information
file out/Esp8266/debug/build/app_0.out

# GDB needs to know about ROM functions in order to create a full stack trace
# See https://github.com/jcmvbkbc/esp-elf-rom
add-symbol-file out/Esp8266/debug/build/bootrom.elf 0x40000000 -readnow

# Useful for lower-level debugging to see the result of stepping through assembler code
#set disassemble-next-line on

# Change the following to your serial port and baud
#set serial baud 115200
#target remote /dev/ttyUSB0
#target remote /COM4

# Display a welcome prompt
echo \nWelcome to SMING!\nType 'c' (continue) to run application\n\n
