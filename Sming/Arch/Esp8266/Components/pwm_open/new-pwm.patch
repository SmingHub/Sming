diff --git a/pwm.c b/pwm.c
index 6df21ac..dfaf4d9 100644
--- a/pwm.c
+++ b/pwm.c
@@ -16,6 +16,8 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
  */
 
+#include <user_config.h>
+
 /* Set the following three defines to your needs */
 
 #ifndef SDK_PWM_PERIOD_COMPAT_MODE
@@ -31,10 +33,10 @@
 
 #define PWM_MAX_TICKS 0x7fffff
 #if SDK_PWM_PERIOD_COMPAT_MODE
-#define PWM_PERIOD_TO_TICKS(x) (x * 0.2)
-#define PWM_DUTY_TO_TICKS(x) (x * 5)
-#define PWM_MAX_DUTY (PWM_MAX_TICKS * 0.2)
-#define PWM_MAX_PERIOD (PWM_MAX_TICKS * 5)
+#define PWM_PERIOD_TO_TICKS(x) (x * 5)
+#define PWM_DUTY_TO_TICKS(x) (x * 0.2)
+#define PWM_MAX_DUTY (PWM_MAX_TICKS * 5)
+#define PWM_MAX_PERIOD (PWM_MAX_TICKS * 0.2)
 #else
 #define PWM_PERIOD_TO_TICKS(x) (x)
 #define PWM_DUTY_TO_TICKS(x) (x)
@@ -109,8 +111,8 @@ struct timer_regs {
 };
 static struct timer_regs* timer = (struct timer_regs*)(0x60000600);
 
-static void ICACHE_RAM_ATTR
-pwm_intr_handler(void)
+static void IRAM_ATTR
+pwm_intr_handler(void* param)
 {
 	if ((pwm_state.current_set[pwm_state.current_phase].off_mask == 0) &&
 	    (pwm_state.current_set[pwm_state.current_phase].on_mask == 0)) {
@@ -120,7 +122,7 @@ pwm_intr_handler(void)
 
 	do {
 		// force write to GPIO registers on each loop
-		asm volatile ("" : : : "memory");
+		__asm__ volatile ("" : : : "memory");
 
 		gpio->out_w1ts = (uint32_t)(pwm_state.current_set[pwm_state.current_phase].on_mask);
 		gpio->out_w1tc = (uint32_t)(pwm_state.current_set[pwm_state.current_phase].off_mask);
@@ -142,7 +144,7 @@ pwm_intr_handler(void)
 			do {
 				ticks -= 1;
 				// stop compiler from optimizing delay loop to noop
-				asm volatile ("" : : : "memory");
+				__asm__ volatile ("" : : : "memory");
 			} while (ticks > 0);
 		}
 
