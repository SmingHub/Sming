diff --git a/Makefile b/Makefile
index 0b43474..5176f8f 100644
--- a/Makefile
+++ b/Makefile
@@ -58,6 +58,19 @@ endif
 ifeq ($(RBOOT_IROM_CHKSUM),1)
 	CFLAGS += -DBOOT_IROM_CHKSUM
 endif
+ifneq ($(RBOOT_ROM0_ADDR),)
+	CFLAGS += -DBOOT_ROM0_ADDR=$(RBOOT_ROM0_ADDR)
+endif
+ifneq ($(RBOOT_ROM1_ADDR),)
+	CFLAGS += -DBOOT_ROM1_ADDR=$(RBOOT_ROM1_ADDR)
+endif
+ifneq ($(RBOOT_ROM2_ADDR),)
+	CFLAGS += -DBOOT_ROM2_ADDR=$(RBOOT_ROM2_ADDR)
+endif
+ifeq ($(RBOOT_SILENT),1)
+	CFLAGS += -DBOOT_SILENT=$(RBOOT_SILENT)
+endif
+
 ifneq ($(RBOOT_EXTRA_INCDIR),)
 	CFLAGS += $(addprefix -I,$(RBOOT_EXTRA_INCDIR))
 endif
@@ -75,6 +88,10 @@ else ifeq ($(SPI_SIZE), 2Mb)
 	E2_OPTS += -2048b
 else ifeq ($(SPI_SIZE), 4M)
 	E2_OPTS += -4096
+else ifeq ($(SPI_SIZE), 8M)
+	E2_OPTS += -8192
+else ifeq ($(SPI_SIZE), 16M)
+	E2_OPTS += -16384
 endif
 ifeq ($(SPI_MODE), qio)
 	E2_OPTS += -qio
diff --git a/rboot.c b/rboot.c
index d622f97..5e254fa 100644
--- a/rboot.c
+++ b/rboot.c
@@ -13,6 +13,12 @@
 #define UART_CLK_FREQ	(26000000 * 2)
 #endif
 
+#ifndef BOOT_SILENT
+#define echof(fmt, ...) ets_printf(fmt, ##__VA_ARGS__)
+#else
+#define echof(fmt, ...)
+#endif
+
 static uint32_t check_image(uint32_t readpos) {
 
 	uint8_t buffer[BUFFER_SIZE];
@@ -257,8 +263,30 @@ static uint8_t calc_chksum(uint8_t *start, uint8_t *end) {
 // created on first boot or in case of corruption
 static uint8_t default_config(rboot_config *romconf, uint32_t flashsize) {
 	romconf->count = 2;
+#ifdef BOOT_ROM0_ADDR
+    romconf->roms[0] = BOOT_ROM0_ADDR;
+#else
 	romconf->roms[0] = SECTOR_SIZE * (BOOT_CONFIG_SECTOR + 1);
+#endif
+
+#ifdef BOOT_ROM1_ADDR
+	romconf->roms[1] = BOOT_ROM1_ADDR;
+#else
 	romconf->roms[1] = (flashsize / 2) + (SECTOR_SIZE * (BOOT_CONFIG_SECTOR + 1));
+#endif
+
+#if defined(BOOT_BIG_FLASH) && defined(BOOT_GPIO_ENABLED)
+	if(flashsize > 0x200000) {
+		romconf->count += 1;
+#ifdef BOOT_ROM2_ADDR
+	romconf->roms[2] = BOOT_ROM2_ADDR;
+#else
+	romconf->roms[2] = 0x310000;
+#endif
+	romconf->gpio_rom = 2;
+}
+#endif
+
 #ifdef BOOT_GPIO_ENABLED
 	romconf->mode = MODE_GPIO_ROM;
 #endif
@@ -306,100 +334,100 @@ uint32_t NOINLINE find_image(void) {
 	ets_delay_us(BOOT_DELAY_MICROS);
 #endif
 
-	ets_printf("\r\nrBoot v1.4.2 - richardaburton@gmail.com\r\n");
+	echof("\r\nrBoot v1.4.2 - richardaburton@gmail.com\r\n");
 
 	// read rom header
 	SPIRead(0, header, sizeof(rom_header));
 
 	// print and get flash size
-	ets_printf("Flash Size:   ");
+	echof("Flash Size:   ");
 	flag = header->flags2 >> 4;
 	if (flag == 0) {
-		ets_printf("4 Mbit\r\n");
+		echof("4 Mbit\r\n");
 		flashsize = 0x80000;
 	} else if (flag == 1) {
-		ets_printf("2 Mbit\r\n");
+		echof("2 Mbit\r\n");
 		flashsize = 0x40000;
 	} else if (flag == 2) {
-		ets_printf("8 Mbit\r\n");
+		echof("8 Mbit\r\n");
 		flashsize = 0x100000;
 	} else if (flag == 3 || flag == 5) {
-		ets_printf("16 Mbit\r\n");
+		echof("16 Mbit\r\n");
 #ifdef BOOT_BIG_FLASH
 		flashsize = 0x200000;
 #else
 		flashsize = 0x100000; // limit to 8Mbit
 #endif
 	} else if (flag == 4 || flag == 6) {
-		ets_printf("32 Mbit\r\n");
+		echof("32 Mbit\r\n");
 #ifdef BOOT_BIG_FLASH
 		flashsize = 0x400000;
 #else
 		flashsize = 0x100000; // limit to 8Mbit
 #endif
 	} else if (flag == 8) {
-		ets_printf("64 Mbit\r\n");
+		echof("64 Mbit\r\n");
 #ifdef BOOT_BIG_FLASH
 		flashsize = 0x800000;
 #else
 		flashsize = 0x100000; // limit to 8Mbit
 #endif
 	} else if (flag == 9) {
-		ets_printf("128 Mbit\r\n");
+		echof("128 Mbit\r\n");
 #ifdef BOOT_BIG_FLASH
 		flashsize = 0x1000000;
 #else
 		flashsize = 0x100000; // limit to 8Mbit
 #endif
 	} else {
-		ets_printf("unknown\r\n");
+		echof("unknown\r\n");
 		// assume at least 4mbit
 		flashsize = 0x80000;
 	}
 
 	// print spi mode
-	ets_printf("Flash Mode:   ");
+	echof("Flash Mode:   ");
 	if (header->flags1 == 0) {
-		ets_printf("QIO\r\n");
+		echof("QIO\r\n");
 	} else if (header->flags1 == 1) {
-		ets_printf("QOUT\r\n");
+		echof("QOUT\r\n");
 	} else if (header->flags1 == 2) {
-		ets_printf("DIO\r\n");
+		echof("DIO\r\n");
 	} else if (header->flags1 == 3) {
-		ets_printf("DOUT\r\n");
+		echof("DOUT\r\n");
 	} else {
-		ets_printf("unknown\r\n");
+		echof("unknown\r\n");
 	}
 
 	// print spi speed
-	ets_printf("Flash Speed:  ");
+	echof("Flash Speed:  ");
 	flag = header->flags2 & 0x0f;
-	if (flag == 0) ets_printf("40 MHz\r\n");
-	else if (flag == 1) ets_printf("26.7 MHz\r\n");
-	else if (flag == 2) ets_printf("20 MHz\r\n");
-	else if (flag == 0x0f) ets_printf("80 MHz\r\n");
-	else ets_printf("unknown\r\n");
+	if (flag == 0) echof("40 MHz\r\n");
+	else if (flag == 1) echof("26.7 MHz\r\n");
+	else if (flag == 2) echof("20 MHz\r\n");
+	else if (flag == 0x0f) echof("80 MHz\r\n");
+	else echof("unknown\r\n");
 
 	// print enabled options
 #ifdef BOOT_BIG_FLASH
-	ets_printf("rBoot Option: Big flash\r\n");
+	echof("rBoot Option: Big flash\r\n");
 #endif
 #ifdef BOOT_CONFIG_CHKSUM
-	ets_printf("rBoot Option: Config chksum\r\n");
+	echof("rBoot Option: Config chksum\r\n");
 #endif
 #ifdef BOOT_GPIO_ENABLED
-	ets_printf("rBoot Option: GPIO rom mode (%d)\r\n", BOOT_GPIO_NUM);
+	echof("rBoot Option: GPIO rom mode (%d)\r\n", BOOT_GPIO_NUM);
 #endif
 #ifdef BOOT_GPIO_SKIP_ENABLED
-	ets_printf("rBoot Option: GPIO skip mode (%d)\r\n", BOOT_GPIO_NUM);
+	echof("rBoot Option: GPIO skip mode (%d)\r\n", BOOT_GPIO_NUM);
 #endif
 #ifdef BOOT_RTC_ENABLED
-	ets_printf("rBoot Option: RTC data\r\n");
+	echof("rBoot Option: RTC data\r\n");
 #endif
 #ifdef BOOT_IROM_CHKSUM
-	ets_printf("rBoot Option: irom chksum\r\n");
+	echof("rBoot Option: irom chksum\r\n");
 #endif
-	ets_printf("\r\n");
+	echof("\r\n");
 
 	// read boot config
 	SPIRead(BOOT_CONFIG_SECTOR * SECTOR_SIZE, buffer, SECTOR_SIZE);
@@ -410,7 +438,7 @@ uint32_t NOINLINE find_image(void) {
 #endif
 		) {
 		// create a default config for a standard 2 rom setup
-		ets_printf("Writing default boot config.\r\n");
+		echof("Writing default boot config.\r\n");
 		ets_memset(romconf, 0x00, sizeof(rboot_config));
 		romconf->magic = BOOT_CONFIG_MAGIC;
 		romconf->version = BOOT_CONFIG_VERSION;
@@ -433,10 +461,10 @@ uint32_t NOINLINE find_image(void) {
 
 		if (rtc.next_mode & MODE_TEMP_ROM) {
 			if (rtc.temp_rom >= romconf->count) {
-				ets_printf("Invalid temp rom selected.\r\n");
+				echof("Invalid temp rom selected.\r\n");
 				return 0;
 			}
-			ets_printf("Booting temp rom.\r\n");
+			echof("Booting temp rom.\r\n");
 			temp_boot = 1;
 			romToBoot = rtc.temp_rom;
 		}
@@ -447,10 +475,10 @@ uint32_t NOINLINE find_image(void) {
 	if (perform_gpio_boot(romconf)) {
 #if defined(BOOT_GPIO_ENABLED)
 		if (romconf->gpio_rom >= romconf->count) {
-			ets_printf("Invalid GPIO rom selected.\r\n");
+			echof("Invalid GPIO rom selected.\r\n");
 			return 0;
 		}
-		ets_printf("Booting GPIO-selected rom.\r\n");
+		echof("Booting GPIO-selected rom.\r\n");
 		romToBoot = romconf->gpio_rom;
 		gpio_boot = 1;
 #elif defined(BOOT_GPIO_SKIP_ENABLED)
@@ -462,7 +490,7 @@ uint32_t NOINLINE find_image(void) {
 #endif
 		updateConfig = 1;
 		if (romconf->mode & MODE_GPIO_ERASES_SDKCONFIG) {
-			ets_printf("Erasing SDK config sectors before booting.\r\n");
+			echof("Erasing SDK config sectors before booting.\r\n");
 			for (sec = 1; sec < 5; sec++) {
 				SPIEraseSector((flashsize / SECTOR_SIZE) - sec);
 			}
@@ -474,7 +502,7 @@ uint32_t NOINLINE find_image(void) {
 	// gpio/temp boots will have already validated this
 	if (romconf->current_rom >= romconf->count) {
 		// if invalid rom selected try rom 0
-		ets_printf("Invalid rom selected, defaulting to 0.\r\n");
+		echof("Invalid rom selected, defaulting to 0.\r\n");
 		romToBoot = 0;
 		romconf->current_rom = 0;
 		updateConfig = 1;
@@ -486,14 +514,14 @@ uint32_t NOINLINE find_image(void) {
 #ifdef BOOT_GPIO_ENABLED
 	if (gpio_boot && loadAddr == 0) {
 		// don't switch to backup for gpio-selected rom
-		ets_printf("GPIO boot rom (%d) is bad.\r\n", romToBoot);
+		echof("GPIO boot rom (%d) is bad.\r\n", romToBoot);
 		return 0;
 	}
 #endif
 #ifdef BOOT_RTC_ENABLED
 	if (temp_boot && loadAddr == 0) {
 		// don't switch to backup for temp rom
-		ets_printf("Temp boot rom (%d) is bad.\r\n", romToBoot);
+		echof("Temp boot rom (%d) is bad.\r\n", romToBoot);
 		// make sure rtc temp boot mode doesn't persist
 		rtc.next_mode = MODE_STANDARD;
 		rtc.chksum = calc_chksum((uint8_t*)&rtc, (uint8_t*)&rtc.chksum);
@@ -504,7 +532,7 @@ uint32_t NOINLINE find_image(void) {
 
 	// check we have a good rom
 	while (loadAddr == 0) {
-		ets_printf("Rom %d at %x is bad.\r\n", romToBoot, romconf->roms[romToBoot]);
+		echof("Rom %d at %x is bad.\r\n", romToBoot, romconf->roms[romToBoot]);
 		// for normal mode try each previous rom
 		// until we find a good one or run out
 		updateConfig = 1;
@@ -512,7 +540,7 @@ uint32_t NOINLINE find_image(void) {
 		if (romToBoot < 0) romToBoot = romconf->count - 1;
 		if (romToBoot == romconf->current_rom) {
 			// tried them all and all are bad!
-			ets_printf("No good rom available.\r\n");
+			echof("No good rom available.\r\n");
 			return 0;
 		}
 		loadAddr = check_image(romconf->roms[romToBoot]);
@@ -543,7 +571,7 @@ uint32_t NOINLINE find_image(void) {
 	system_rtc_mem(RBOOT_RTC_ADDR, &rtc, sizeof(rboot_rtc_data), RBOOT_RTC_WRITE);
 #endif
 
-	ets_printf("Booting rom %d at %x, load addr %x.\r\n", romToBoot, romconf->roms[romToBoot], loadAddr);
+	echof("Booting rom %d at %x, load addr %x.\r\n", romToBoot, romconf->roms[romToBoot], loadAddr);
 	// copy the loader to top of iram
 	ets_memcpy((void*)_text_addr, _text_data, _text_len);
 	// return address to load from
diff --git a/appcode/rboot-api.c b/appcode/rboot-api.c
index eb4d028..490a763 100644
--- a/appcode/rboot-api.c
+++ b/appcode/rboot-api.c
@@ -9,7 +9,7 @@
 #include <string.h>
 // c_types.h needed for spi_flash.h
 #include <c_types.h>
-#include <spi_flash.h>
+#include <esp_spi_flash.h>
 
 #include "rboot-api.h"
 
@@ -33,7 +33,7 @@ static uint8_t calc_chksum(uint8_t *start, uint8_t *end) {
 // get the rboot config
 rboot_config ICACHE_FLASH_ATTR rboot_get_config(void) {
 	rboot_config conf;
-	spi_flash_read(BOOT_CONFIG_SECTOR * SECTOR_SIZE, (uint32_t*)&conf, sizeof(rboot_config));
+	flashmem_read(&conf, BOOT_CONFIG_SECTOR * SECTOR_SIZE, sizeof(rboot_config));
 	return conf;
 }
 
@@ -43,7 +43,7 @@ rboot_config ICACHE_FLASH_ATTR rboot_get_config(void) {
 // updates checksum automatically (if enabled)
 bool ICACHE_FLASH_ATTR rboot_set_config(rboot_config *conf) {
 	uint8_t *buffer;
-	buffer = (uint8_t*)pvPortMalloc(SECTOR_SIZE, 0, 0);
+	buffer = (uint8_t*)os_malloc(SECTOR_SIZE);
 	if (!buffer) {
 		//os_printf("No ram!\r\n");
 		return false;
@@ -53,12 +53,12 @@ bool ICACHE_FLASH_ATTR rboot_set_config(rboot_config *conf) {
 	conf->chksum = calc_chksum((uint8_t*)conf, (uint8_t*)&conf->chksum);
 #endif
 	
-	spi_flash_read(BOOT_CONFIG_SECTOR * SECTOR_SIZE, (uint32_t*)((void*)buffer), SECTOR_SIZE);
+	flashmem_read(buffer, BOOT_CONFIG_SECTOR * SECTOR_SIZE, SECTOR_SIZE);
 	memcpy(buffer, conf, sizeof(rboot_config));
-	spi_flash_erase_sector(BOOT_CONFIG_SECTOR);
-	spi_flash_write(BOOT_CONFIG_SECTOR * SECTOR_SIZE, (uint32_t*)((void*)buffer), SECTOR_SIZE);
+	flashmem_erase_sector(BOOT_CONFIG_SECTOR);
+	flashmem_write(buffer, BOOT_CONFIG_SECTOR * SECTOR_SIZE, SECTOR_SIZE);
 	
-	vPortFree(buffer, 0, 0);
+	os_free(buffer);
 	return true;
 }
 
@@ -114,7 +114,7 @@ bool ICACHE_FLASH_ATTR rboot_write_flash(rboot_write_status *status, uint8_t *da
 	}
 	
 	// get a buffer
-	buffer = (uint8_t *)pvPortMalloc(len + status->extra_count, 0, 0);
+	buffer = (uint8_t *)os_malloc(len + status->extra_count);
 	if (!buffer) {
 		//os_printf("No ram!\r\n");
 		return false;
@@ -141,18 +141,18 @@ bool ICACHE_FLASH_ATTR rboot_write_flash(rboot_write_status *status, uint8_t *da
 		lastsect = ((status->start_addr + len) - 1) / SECTOR_SIZE;
 		while (lastsect > status->last_sector_erased) {
 			status->last_sector_erased++;
-			spi_flash_erase_sector(status->last_sector_erased);
+			flashmem_erase_sector(status->last_sector_erased);
 		}
 
 		// write current chunk
 		//os_printf("write addr: 0x%08x, len: 0x%04x\r\n", status->start_addr, len);
-		if (spi_flash_write(status->start_addr, (uint32_t *)((void*)buffer), len) == SPI_FLASH_RESULT_OK) {
+		if (flashmem_write(buffer, status->start_addr, len) == len) {
 			ret = true;
 			status->start_addr += len;
 		}
 	//}
 
-	vPortFree(buffer, 0, 0);
+	os_free(buffer);
 	return ret;
 }
 
