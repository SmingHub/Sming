diff --git a/crypto/crypto_misc.c b/crypto/crypto_misc.c
index dca7e5f..5f4ec51 100644
--- a/crypto/crypto_misc.c
+++ b/crypto/crypto_misc.c
@@ -44,7 +44,6 @@
 
 #ifdef ESP8266
 #define CONFIG_SSL_SKELETON_MODE 1
-uint32_t phy_get_rand();
 #endif
 
 #if defined(CONFIG_USE_DEV_URANDOM)
@@ -157,62 +156,6 @@ EXP_FUNC void STDCALL RNG_terminate(void)
 #endif
 }
 
-/**
- * Set a series of bytes with a random number. Individual bytes can be 0
- */
-EXP_FUNC int STDCALL get_random(int num_rand_bytes, uint8_t *rand_data)
-{   
-#if !defined(WIN32) && defined(CONFIG_USE_DEV_URANDOM)
-    /* use the Linux default - read from /dev/urandom */
-    if (read(rng_fd, rand_data, num_rand_bytes) < 0) 
-        return -1;
-#elif defined(WIN32) && defined(CONFIG_WIN32_USE_CRYPTO_LIB)
-    /* use Microsoft Crypto Libraries */
-    CryptGenRandom(gCryptProv, num_rand_bytes, rand_data);
-#elif defined(ESP8266)
-    for (size_t cb = 0; cb < num_rand_bytes; cb += 4) {
-        uint32_t r = phy_get_rand();
-        size_t left = num_rand_bytes - cb;
-        left = (left < 4) ? left : 4;
-        memcpy(rand_data + cb, &r, left);
-    }
-#else   /* nothing else to use, so use a custom RNG */
-    /* The method we use when we've got nothing better. Use RC4, time
-       and a couple of random seeds to generate a random sequence */
-    AES_CTX rng_ctx;
-    struct timeval tv;
-    MD5_CTX rng_digest_ctx;
-    uint8_t digest[MD5_SIZE];
-    uint64_t *ep;
-    int i;
-
-    /* A proper implementation would use counters etc for entropy */
-    gettimeofday(&tv, NULL);
-    ep = (uint64_t *)entropy_pool;
-    ep[0] ^= ENTROPY_COUNTER1;
-    ep[1] ^= ENTROPY_COUNTER2;
-
-    /* use a digested version of the entropy pool as a key */
-    MD5_Init(&rng_digest_ctx);
-    MD5_Update(&rng_digest_ctx, entropy_pool, ENTROPY_POOL_SIZE);
-    MD5_Final(digest, &rng_digest_ctx);
-
-    /* come up with the random sequence */
-    AES_set_key(&rng_ctx, digest, (const uint8_t *)ep, AES_MODE_128); /* use as a key */
-    memcpy(rand_data, entropy_pool, num_rand_bytes < ENTROPY_POOL_SIZE ?
-				num_rand_bytes : ENTROPY_POOL_SIZE);
-    AES_cbc_encrypt(&rng_ctx, rand_data, rand_data, num_rand_bytes);
-
-    /* move things along */
-    for (i = ENTROPY_POOL_SIZE-1; i >= MD5_SIZE ; i--)
-        entropy_pool[i] = entropy_pool[i-MD5_SIZE];
-
-    /* insert the digest at the start of the entropy pool */
-    memcpy(entropy_pool, digest, MD5_SIZE);
-#endif
-    return 0;
-}
-
 /**
  * Set a series of bytes with a random number. Individual bytes are not zero.
  */
@@ -289,7 +232,7 @@ EXP_FUNC void STDCALL print_blob(const char *format,
 
     va_start(ap, size);
     snprintf(tmp, sizeof(tmp), "SSL: %s\n", format);
-    vprintf(tmp, ap);
+    m_vprintf(tmp, ap);
     print_hex_init(size);
     for (i = 0; i < size; i++)
     {

diff --git a/replacements/time.c b/replacements/time.c
index 4972119..d3f0d1e 100644
--- a/replacements/time.c
+++ b/replacements/time.c
@@ -16,6 +16,9 @@
  *
  */
 
+#define _C_TYPES_H_
+#include <c_types.h>
+
 #include <time.h>
 #include <sntp.h>
 
@@ -24,21 +27,14 @@ extern uint64_t system_mktime(uint32_t year, uint32_t mon, uint32_t day, uint32_
 
 static int errno_var = 0;
 
-int* __errno(void) {
+// These functions are implemented in Espressif SDK versions 2 and later (libmain.a) so we weaken them to avoid linker problems
+#define WEAK_ATTR __attribute__((weak))
+
+int* WEAK_ATTR __errno(void) {
     // DEBUGV("__errno is called last error: %d (not current)\n", errno_var);
     return &errno_var;
 }
 
-unsigned long millis(void)
-{
-	return system_get_time() / 1000UL;
-}
-
-unsigned long micros(void)
-{
-	return system_get_time();
-}
-
 #ifndef _TIMEVAL_DEFINED
 #define _TIMEVAL_DEFINED
 struct timeval {
@@ -60,12 +56,12 @@ static time_t s_bootTime = 0;
 // calculate offset used in gettimeofday
 static void ensureBootTimeIsSet()
 {
-    if (!s_bootTime)
+    if (s_bootTime == 0)
     {
         time_t now = sntp_get_current_timestamp();
-        if (now)
+        if (now != 0)
         {
-            s_bootTime =  now - millis() / 1000;
+            s_bootTime =  now - (system_get_time() / 1000000);
         }
     }
 }
@@ -79,7 +75,7 @@ static void setServer(int id, const char* name_or_ip)
     }
 }
 
-void configTime(int timezone, int daylightOffset_sec, const char* server1, const char* server2, const char* server3)
+void WEAK_ATTR configTime(int timezone, int daylightOffset_sec, const char* server1, const char* server2, const char* server3)
 {
     sntp_stop();
 
@@ -93,22 +89,24 @@ void configTime(int timezone, int daylightOffset_sec, const char* server1, const
     sntp_init();
 }
 
-int clock_gettime(clockid_t unused, struct timespec *tp)
+int WEAK_ATTR clock_gettime(clockid_t unused, struct timespec *tp)
 {
-    tp->tv_sec  = millis() / 1000;
-    tp->tv_nsec = micros() * 1000;
+    unsigned long us = system_get_time();
+    tp->tv_sec  = us / 1000000UL;
+    us %= 1000000UL;
+    tp->tv_nsec = us * 1000;
     return 0;
 }
 
 // seconds since 1970
-time_t mktime(struct tm *t)
+time_t WEAK_ATTR mktime(struct tm *t)
 {
     // system_mktime expects month in range 1..12
     #define START_MONTH 1
     return DIFF1900TO1970 + system_mktime(t->tm_year, t->tm_mon + START_MONTH, t->tm_mday, t->tm_hour, t->tm_min, t->tm_sec);
 }
 
-time_t time(time_t * t)
+time_t WEAK_ATTR time(time_t * t)
 {
     time_t seconds = sntp_get_current_timestamp();
     if (t)
@@ -118,30 +116,32 @@ time_t time(time_t * t)
     return seconds;
 }
 
-char* asctime(const struct tm *t)
+char* WEAK_ATTR asctime(const struct tm *t)
 {
     return sntp_asctime(t);
 }
 
-struct tm* localtime(const time_t *clock)
+struct tm* WEAK_ATTR localtime(const time_t *clock)
 {
     return sntp_localtime(clock);
 }
 
-char* ctime(const time_t *t)
+char* WEAK_ATTR ctime(const time_t *t)
 {
     struct tm* p_tm = localtime(t);
     char* result = asctime(p_tm);
     return result;
 }
 
-int gettimeofday(struct timeval *tp, void *tzp)
+int WEAK_ATTR gettimeofday(struct timeval *tp, void *tzp)
 {
     if (tp)
     {
         ensureBootTimeIsSet();
-        tp->tv_sec  = (s_bootTime + millis()) / 1000;
-        tp->tv_usec = micros() * 1000;
+        unsigned long us = system_get_time();
+        tp->tv_sec  = s_bootTime + (us / 1000000UL);
+        us %= 1000000UL;
+        tp->tv_usec = us * 1000UL;
     }
     return 0;
 }

diff --git a/ssl/tls1.c b/ssl/tls1.c
index 8f0fbfb..35ad4f3 100644
--- a/ssl/tls1.c
+++ b/ssl/tls1.c
@@ -85,7 +85,7 @@ static const cipher_info_t cipher_info[NUM_PROTOCOLS] =
         16,                             /* block padding size */
         SHA1_SIZE,                      /* digest size */
         2*(SHA1_SIZE+16+16),            /* key block size */
-        hmac_sha1_v,                    /* hmac algorithm */
+        crypto_sha1_hmac_v,             /* hmac algorithm */
         (crypt_func)AES_cbc_encrypt,    /* encrypt */
         (crypt_func)AES_cbc_decrypt     /* decrypt */
     },
@@ -96,7 +96,7 @@ static const cipher_info_t cipher_info[NUM_PROTOCOLS] =
         16,                             /* block padding size */
         SHA1_SIZE,                      /* digest size */
         2*(SHA1_SIZE+32+16),            /* key block size */
-        hmac_sha1_v,                    /* hmac algorithm */
+        crypto_sha1_hmac_v,             /* hmac algorithm */
         (crypt_func)AES_cbc_encrypt,    /* encrypt */
         (crypt_func)AES_cbc_decrypt     /* decrypt */
     },       
@@ -107,7 +107,7 @@ static const cipher_info_t cipher_info[NUM_PROTOCOLS] =
         16,                             /* block padding size */
         SHA256_SIZE,                    /* digest size */
         2*(SHA256_SIZE+32+16),          /* key block size */
-        hmac_sha256_v,                  /* hmac algorithm */
+        crypto_sha256_hmac_v,           /* hmac algorithm */
         (crypt_func)AES_cbc_encrypt,    /* encrypt */
         (crypt_func)AES_cbc_decrypt     /* decrypt */
     },       
@@ -118,7 +118,7 @@ static const cipher_info_t cipher_info[NUM_PROTOCOLS] =
         16,                             /* block padding size */
         SHA256_SIZE,                    /* digest size */
         2*(SHA256_SIZE+32+16),          /* key block size */
-        hmac_sha256_v,                  /* hmac algorithm */
+        crypto_sha256_hmac_v,           /* hmac algorithm */
         (crypt_func)AES_cbc_encrypt,    /* encrypt */
         (crypt_func)AES_cbc_decrypt     /* decrypt */
     }
@@ -843,15 +843,15 @@ void add_packet(SSL *ssl, const uint8_t *pkt, int len)
     // TLS1.2+
     if (ssl->version >= SSL_PROTOCOL_VERSION_TLS1_2 || ssl->version == 0) 
     {
-        SHA256_Update(&ssl->dc->sha256_ctx, pkt, len);
+        crypto_sha256_update(&ssl->dc->sha256_ctx, pkt, len);
     }
 
     if (ssl->version < SSL_PROTOCOL_VERSION_TLS1_2 || 
                 ssl->next_state == HS_SERVER_HELLO ||
                 ssl->next_state == 0) 
     {
-        MD5_Update(&ssl->dc->md5_ctx, pkt, len);
-        SHA1_Update(&ssl->dc->sha1_ctx, pkt, len);
+        crypto_md5_update(&ssl->dc->md5_ctx, pkt, len);
+        crypto_sha1_update(&ssl->dc->sha1_ctx, pkt, len);
     }
 }
 
@@ -864,9 +864,9 @@ static void p_hash_md5(const uint8_t *sec, int sec_len,
     uint8_t a1[MD5_SIZE+77];
 
     /* A(1) */
-    hmac_md5(seed, seed_len, sec, sec_len, a1);
+    crypto_md5_hmac(seed, seed_len, sec, sec_len, a1);
     memcpy(&a1[MD5_SIZE], seed, seed_len);
-    hmac_md5(a1, MD5_SIZE+seed_len, sec, sec_len, out);
+    crypto_md5_hmac(a1, MD5_SIZE+seed_len, sec, sec_len, out);
 
     while (olen > MD5_SIZE)
     {
@@ -875,11 +875,11 @@ static void p_hash_md5(const uint8_t *sec, int sec_len,
         olen -= MD5_SIZE;
 
         /* A(N) */
-        hmac_md5(a1, MD5_SIZE, sec, sec_len, a2);
+        crypto_md5_hmac(a1, MD5_SIZE, sec, sec_len, a2);
         memcpy(a1, a2, MD5_SIZE);
 
         /* work out the actual hash */
-        hmac_md5(a1, MD5_SIZE+seed_len, sec, sec_len, out);
+        crypto_md5_hmac(a1, MD5_SIZE+seed_len, sec, sec_len, out);
     }
 }
 
@@ -892,9 +892,9 @@ static void p_hash_sha1(const uint8_t *sec, int sec_len,
     uint8_t a1[SHA1_SIZE+77];
 
     /* A(1) */
-    hmac_sha1(seed, seed_len, sec, sec_len, a1);
+    crypto_sha1_hmac(seed, seed_len, sec, sec_len, a1);
     memcpy(&a1[SHA1_SIZE], seed, seed_len);
-    hmac_sha1(a1, SHA1_SIZE+seed_len, sec, sec_len, out);
+    crypto_sha1_hmac(a1, SHA1_SIZE+seed_len, sec, sec_len, out);
 
     while (olen > SHA1_SIZE)
     {
@@ -903,11 +903,11 @@ static void p_hash_sha1(const uint8_t *sec, int sec_len,
         olen -= SHA1_SIZE;
 
         /* A(N) */
-        hmac_sha1(a1, SHA1_SIZE, sec, sec_len, a2);
+        crypto_sha1_hmac(a1, SHA1_SIZE, sec, sec_len, a2);
         memcpy(a1, a2, SHA1_SIZE);
 
         /* work out the actual hash */
-        hmac_sha1(a1, SHA1_SIZE+seed_len, sec, sec_len, out);
+        crypto_sha1_hmac(a1, SHA1_SIZE+seed_len, sec, sec_len, out);
     }
 }
 
@@ -920,9 +920,9 @@ static void p_hash_sha256(const uint8_t *sec, int sec_len,
     uint8_t a1[SHA256_SIZE+77];
 
     /* A(1) */
-    hmac_sha256(seed, seed_len, sec, sec_len, a1);
+    crypto_sha256_hmac(seed, seed_len, sec, sec_len, a1);
     memcpy(&a1[SHA256_SIZE], seed, seed_len);
-    hmac_sha256(a1, SHA256_SIZE+seed_len, sec, sec_len, out);
+    crypto_sha256_hmac(a1, SHA256_SIZE+seed_len, sec, sec_len, out);
 
     while (olen > SHA256_SIZE)
     {
@@ -931,11 +931,11 @@ static void p_hash_sha256(const uint8_t *sec, int sec_len,
         olen -= SHA256_SIZE;
 
         // A(N)
-        hmac_sha256(a1, SHA256_SIZE, sec, sec_len, a2);
+        crypto_sha256_hmac(a1, SHA256_SIZE, sec, sec_len, a2);
         memcpy(a1, a2, SHA256_SIZE);
 
         // work out the actual hash 
-        hmac_sha256(a1, SHA256_SIZE+seed_len, sec, sec_len, out);
+        crypto_sha256_hmac(a1, SHA256_SIZE+seed_len, sec, sec_len, out);
     }
 }
 
@@ -1023,20 +1023,20 @@ int finished_digest(SSL *ssl, const char *label, uint8_t *digest)
 
     if (ssl->version >= SSL_PROTOCOL_VERSION_TLS1_2) // TLS1.2+
     {
-        SHA256_CTX sha256_ctx = ssl->dc->sha256_ctx; // interim copy
-        SHA256_Final(q, &sha256_ctx);
+        crypto_sha256_context_t sha256_ctx = ssl->dc->sha256_ctx; // interim copy
+        crypto_sha256_final(q, &sha256_ctx);
         q += SHA256_SIZE;
         dgst_len = (int)(q-mac_buf);
     }
     else // TLS1.0/1.1
     {
-        MD5_CTX md5_ctx = ssl->dc->md5_ctx; // interim copy
-        SHA1_CTX sha1_ctx = ssl->dc->sha1_ctx;
+        crypto_md5_context_t md5_ctx = ssl->dc->md5_ctx; // interim copy
+        crypto_sha1_context_t sha1_ctx = ssl->dc->sha1_ctx;
 
-        MD5_Final(q, &md5_ctx);
+        crypto_md5_final(q, &md5_ctx);
         q += MD5_SIZE;
         
-        SHA1_Final(q, &sha1_ctx);
+        crypto_sha1_final(q, &sha1_ctx);
         q += SHA1_SIZE;
         dgst_len = (int)(q-mac_buf);
     }
@@ -1368,6 +1368,10 @@ int basic_read(SSL *ssl, uint8_t **in_data)
     int read_len, is_client = IS_SET_SSL_FLAG(SSL_IS_CLIENT);
     uint8_t *buf = ssl->bm_data;
 
+    if (ssl->can_free_certificates) {
+    	certificate_free(ssl);
+    }
+
     if (IS_SET_SSL_FLAG(SSL_SENT_CLOSE_NOTIFY))
         return SSL_CLOSE_NOTIFY;
 
@@ -1845,9 +1849,9 @@ void disposable_new(SSL *ssl)
     if (ssl->dc == NULL)
     {
         ssl->dc = (DISPOSABLE_CTX *)calloc(1, sizeof(DISPOSABLE_CTX));
-        SHA256_Init(&ssl->dc->sha256_ctx);
-        MD5_Init(&ssl->dc->md5_ctx);
-        SHA1_Init(&ssl->dc->sha1_ctx);
+        crypto_sha256_init(&ssl->dc->sha256_ctx);
+        crypto_md5_init(&ssl->dc->md5_ctx);
+        crypto_sha1_init(&ssl->dc->sha1_ctx);
     }
 }
 

diff --git a/crypto/bigint.c b/crypto/bigint.c
index d90b093..f18fbd5 100644
--- a/crypto/bigint.c
+++ b/crypto/bigint.c
@@ -688,7 +688,7 @@ void bi_print(const char *label, bigint *x)
         {
             comp mask = 0x0f << (j*4);
             comp num = (x->comps[i] & mask) >> (j*4);
-            putc((num <= 9) ? (num + '0') : (num + 'A' - 10), stdout);
+            m_putc((num <= 9) ? (num + '0') : (num + 'A' - 10));
         }
     }  
 
diff --git a/ssl/crypto_misc.h b/ssl/crypto_misc.h
index 02d9306..3590c1d 100644
--- a/ssl/crypto_misc.h
+++ b/ssl/crypto_misc.h
@@ -39,8 +39,11 @@
 extern "C" {
 #endif
 
-#include "crypto.h"
-#include "bigint.h"
+#include "../crypto/crypto.h"
+#include "../crypto/bigint.h"
+#include <Crypto/HashApi/md5.h>
+#include <Crypto/HashApi/sha1.h>
+#include <Crypto/HashApi/sha2.h>
 
 /**************************************************************************
  * X509 declarations 

diff --git a/ssl/tls1.h b/ssl/tls1.h
index dac63b9..bf79c9e 100644
--- a/ssl/tls1.h
+++ b/ssl/tls1.h
@@ -44,7 +44,6 @@ extern "C" {
 #include "config.h"
 #include "os_int.h"
 #include "os_port.h"
-#include "crypto.h"
 #include "crypto_misc.h"
 
 #define SSL_PROTOCOL_MIN_VERSION    0x31   /* TLS v1.0 */
@@ -161,9 +160,9 @@ typedef struct
 
 typedef struct
 {
-    MD5_CTX md5_ctx;
-    SHA1_CTX sha1_ctx;
-    SHA256_CTX sha256_ctx;
+    crypto_md5_context_t md5_ctx;
+    crypto_sha1_context_t sha1_ctx;
+    crypto_sha256_context_t sha256_ctx;
     uint8_t client_random[SSL_RANDOM_SIZE]; /* client's random sequence */
     uint8_t server_random[SSL_RANDOM_SIZE]; /* server's random sequence */
     uint8_t final_finish_mac[128];

diff --git a/ssl/loader.c b/ssl/loader.c
index 6e41f40..8e4055b 100644
--- a/ssl/loader.c
+++ b/ssl/loader.c
@@ -222,7 +222,7 @@ static int pem_decrypt(const char *where, const char *end,
     char *start = NULL;
     uint8_t iv[IV_SIZE];
     int i, pem_size;
-    MD5_CTX md5_ctx;
+    crypto_md5_context_t md5_ctx;
     AES_CTX aes_ctx;
     uint8_t key[32];        /* AES256 size */
 
@@ -269,18 +269,18 @@ static int pem_decrypt(const char *where, const char *end,
         goto error;
 
     /* work out the key */
-    MD5_Init(&md5_ctx);
-    MD5_Update(&md5_ctx, (const uint8_t *)password, strlen(password));
-    MD5_Update(&md5_ctx, iv, SALT_SIZE);
-    MD5_Final(key, &md5_ctx);
+    crypto_md5_init(&md5_ctx);
+    crypto_md5_update(&md5_ctx, (const uint8_t*)password, strlen(password));
+    crypto_md5_update(&md5_ctx, iv, SALT_SIZE);
+    crypto_md5_final(key, &md5_ctx);
 
     if (is_aes_256)
     {
-        MD5_Init(&md5_ctx);
-        MD5_Update(&md5_ctx, key, MD5_SIZE);
-        MD5_Update(&md5_ctx, (const uint8_t *)password, strlen(password));
-        MD5_Update(&md5_ctx, iv, SALT_SIZE);
-        MD5_Final(&key[MD5_SIZE], &md5_ctx);
+        crypto_md5_init(&md5_ctx);
+        crypto_md5_update(&md5_ctx, key, MD5_SIZE);
+        crypto_md5_update(&md5_ctx, (const uint8_t*)password, strlen(password));
+        crypto_md5_update(&md5_ctx, iv, SALT_SIZE);
+        crypto_md5_final(&key[MD5_SIZE], &md5_ctx);
     }
 
     /* decrypt using the key/iv */

diff --git a/ssl/x509.c b/ssl/x509.c
index a51b948..bd42b57 100644
--- a/ssl/x509.c
+++ b/ssl/x509.c
@@ -109,76 +109,52 @@ int x509_new(const uint8_t *cert, int *len, X509_CTX **ctx)
     end_spki = offset;
 
     x509_ctx->fingerprint = malloc(SHA1_SIZE);
-    SHA1_CTX sha_fp_ctx;
-    SHA1_Init(&sha_fp_ctx);
-    SHA1_Update(&sha_fp_ctx, &cert[0], cert_size);
-    SHA1_Final(x509_ctx->fingerprint, &sha_fp_ctx);
+    crypto_sha1_context_t sha_fp_ctx;
+    crypto_sha1_init(&sha_fp_ctx);
+    crypto_sha1_update(&sha_fp_ctx, &cert[0], cert_size);
+    crypto_sha1_final(x509_ctx->fingerprint, &sha_fp_ctx);
 
     x509_ctx->spki_sha256 = malloc(SHA256_SIZE);
-    SHA256_CTX spki_hash_ctx;
-    SHA256_Init(&spki_hash_ctx);
-    SHA256_Update(&spki_hash_ctx, &cert[begin_spki], end_spki-begin_spki);
-    SHA256_Final(x509_ctx->spki_sha256, &spki_hash_ctx);
+    crypto_sha256_context_t spki_hash_ctx;
+    crypto_sha256_init(&spki_hash_ctx);
+    crypto_sha256_update(&spki_hash_ctx, &cert[begin_spki], end_spki-begin_spki);
+    crypto_sha256_final(x509_ctx->spki_sha256, &spki_hash_ctx);
 
 #ifdef CONFIG_SSL_CERT_VERIFICATION /* only care if doing verification */
     bi_ctx = x509_ctx->rsa_ctx->bi_ctx;
 
     /* use the appropriate signature algorithm */
-    switch (x509_ctx->sig_type)
+
+#define CALC_DIGEST(hash, size)                                                                                        \
+	{                                                                                                                  \
+		crypto_##hash##_context_t ctx;                                                                                 \
+		uint8_t dgst[size];                                                                                            \
+		crypto_##hash##_init(&ctx);                                                                                    \
+		crypto_##hash##_update(&ctx, &cert[begin_tbs], end_tbs - begin_tbs);                                           \
+		crypto_##hash##_final(dgst, &ctx);                                                                             \
+		x509_ctx->digest = bi_import(bi_ctx, dgst, size);                                                              \
+	}
+
+	switch (x509_ctx->sig_type)
     {
         case SIG_TYPE_MD5:
-        {
-            MD5_CTX md5_ctx;
-            uint8_t md5_dgst[MD5_SIZE];
-            MD5_Init(&md5_ctx);
-            MD5_Update(&md5_ctx, &cert[begin_tbs], end_tbs-begin_tbs);
-            MD5_Final(md5_dgst, &md5_ctx);
-            x509_ctx->digest = bi_import(bi_ctx, md5_dgst, MD5_SIZE);
-        }
+        	CALC_DIGEST(md5, MD5_SIZE);
             break;
 
         case SIG_TYPE_SHA1:
-        {
-            SHA1_CTX sha_ctx;
-            uint8_t sha_dgst[SHA1_SIZE];
-            SHA1_Init(&sha_ctx);
-            SHA1_Update(&sha_ctx, &cert[begin_tbs], end_tbs-begin_tbs);
-            SHA1_Final(sha_dgst, &sha_ctx);
-            x509_ctx->digest = bi_import(bi_ctx, sha_dgst, SHA1_SIZE);
-        }
+        	CALC_DIGEST(sha1, SHA1_SIZE);
             break;
 
         case SIG_TYPE_SHA256:
-        {
-            SHA256_CTX sha256_ctx;
-            uint8_t sha256_dgst[SHA256_SIZE];
-            SHA256_Init(&sha256_ctx);
-            SHA256_Update(&sha256_ctx, &cert[begin_tbs], end_tbs-begin_tbs);
-            SHA256_Final(sha256_dgst, &sha256_ctx);
-            x509_ctx->digest = bi_import(bi_ctx, sha256_dgst, SHA256_SIZE);
-        }
+        	CALC_DIGEST(sha256, SHA256_SIZE);
             break;
 
         case SIG_TYPE_SHA384:
-        {
-            SHA384_CTX sha384_ctx;
-            uint8_t sha384_dgst[SHA384_SIZE];
-            SHA384_Init(&sha384_ctx);
-            SHA384_Update(&sha384_ctx, &cert[begin_tbs], end_tbs-begin_tbs);
-            SHA384_Final(sha384_dgst, &sha384_ctx);
-            x509_ctx->digest = bi_import(bi_ctx, sha384_dgst, SHA384_SIZE);
-        }
+        	CALC_DIGEST(sha384, SHA384_SIZE);
             break;
 
         case SIG_TYPE_SHA512:
-        {
-            SHA512_CTX sha512_ctx;
-            uint8_t sha512_dgst[SHA512_SIZE];
-            SHA512_Init(&sha512_ctx);
-            SHA512_Update(&sha512_ctx, &cert[begin_tbs], end_tbs-begin_tbs);
-            SHA512_Final(sha512_dgst, &sha512_ctx);
-            x509_ctx->digest = bi_import(bi_ctx, sha512_dgst, SHA512_SIZE);
-        }
+        	CALC_DIGEST(sha512, SHA512_SIZE);
             break;
     }
 

diff --git a/ssl/gen_cert.c b/ssl/gen_cert.c
index 093ae9c..d611ab0 100644
--- a/ssl/gen_cert.c
+++ b/ssl/gen_cert.c
@@ -314,7 +314,7 @@ static int gen_tbs_cert(const char * dn[],
                     uint8_t *sha_dgst)
 {
     int ret = X509_OK;
-    SHA1_CTX sha_ctx;
+    crypto_sha1_context_t sha_ctx;
     int seq_offset;
     int begin_tbs = *offset;
     int seq_size = pre_adjust_with_size(
@@ -336,9 +336,9 @@ static int gen_tbs_cert(const char * dn[],
     gen_pub_key(rsa_ctx, buf, offset);
     adjust_with_size(seq_size, seq_offset, buf, offset);
 
-    SHA1_Init(&sha_ctx);
-    SHA1_Update(&sha_ctx, &buf[begin_tbs], *offset-begin_tbs);
-    SHA1_Final(sha_dgst, &sha_ctx);
+    crypto_sha1_init(&sha_ctx);
+    crypto_sha1_update(&sha_ctx, &buf[begin_tbs], *offset-begin_tbs);
+    crypto_sha1_final(sha_dgst, &sha_ctx);
 
 error:
     return ret;

diff --git a/ssl/p12.c b/ssl/p12.c
index 5bd2394..5363d22 100644
--- a/ssl/p12.c
+++ b/ssl/p12.c
@@ -190,7 +190,7 @@ static int p8_decrypt(const char *uni_pass, int uni_pass_len,
     uint8_t p[BLOCK_SIZE*2];
     uint8_t d[BLOCK_SIZE];
     uint8_t Ai[SHA1_SIZE];
-    SHA1_CTX sha_ctx;
+    crypto_sha1_context_t sha_ctx;
     RC4_CTX rc4_ctx;
     int i;
 
@@ -202,16 +202,16 @@ static int p8_decrypt(const char *uni_pass, int uni_pass_len,
     }
 
     /* get the key - no IV since we are using RC4 */
-    SHA1_Init(&sha_ctx);
-    SHA1_Update(&sha_ctx, d, sizeof(d));
-    SHA1_Update(&sha_ctx, p, sizeof(p));
-    SHA1_Final(Ai, &sha_ctx);
+    crypto_sha1_init(&sha_ctx);
+    crypto_sha1_update(&sha_ctx, d, sizeof(d));
+    crypto_sha1_update(&sha_ctx, p, sizeof(p));
+    crypto_sha1_final(Ai, &sha_ctx);
 
     for (i = 1; i < iter; i++)
     {
-        SHA1_Init(&sha_ctx);
-        SHA1_Update(&sha_ctx, Ai, SHA1_SIZE);
-        SHA1_Final(Ai, &sha_ctx);
+    	crypto_sha1_init(&sha_ctx);
+    	crypto_sha1_update(&sha_ctx, Ai, SHA1_SIZE);
+    	crypto_sha1_final(Ai, &sha_ctx);
     }
 
     /* do the decryption */
@@ -409,7 +409,7 @@ int pkcs12_decode(SSL_CTX *ssl_ctx, SSLObjLoader *ssl_obj, const char *password)
                             key, SHA1_SIZE, PKCS12_MAC_ID)) < 0)
         goto error;
 
-    hmac_sha1(auth_safes, auth_safes_len, key, SHA1_SIZE, mac);
+    crypto_sha1_hmac(auth_safes, auth_safes_len, key, SHA1_SIZE, mac);
 
     if (memcmp(mac, orig_mac, SHA1_SIZE))
     {

diff --git a/crypto/crypto.h b/crypto/crypto.h
index da24d31..4de139b 100644
--- a/crypto/crypto.h
+++ b/crypto/crypto.h
@@ -196,6 +196,10 @@ EXP_FUNC void STDCALL MD5_Final(uint8_t *digest, MD5_CTX *);
 /**************************************************************************
  * HMAC declarations 
  **************************************************************************/
+#define hmac_md5 ax_hmac_md5
+#define hmac_sha1 ax_hmac_sha1
+#define hmac_sha256 ax_hmac_sha256
+
 void hmac_md5(const uint8_t *msg, int length, const uint8_t *key, 
         int key_len, uint8_t *digest);
 void hmac_sha1(const uint8_t *msg, int length, const uint8_t *key, 
@@ -206,6 +210,10 @@ void hmac_sha256(const uint8_t *msg, int length, const uint8_t *key,
 /**************************************************************************
  * HMAC functions operating on vectors 
  **************************************************************************/
+#define hmac_md5_v ax_hmac_md5_v
+#define hmac_sha1_v ax_hmac_sha1_v
+#define hmac_sha256_v ax_hmac_sha256_v
+
 void hmac_md5_v(const uint8_t **msg, int* length, int count, const uint8_t *key, 
         int key_len, uint8_t *digest);
 void hmac_sha1_v(const uint8_t **msg, int* length, int count, const uint8_t *key, 

