diff --git a/multipart_parser.c b/multipart_parser.c
index 981dabb..014f7d0 100644
--- a/multipart_parser.c
+++ b/multipart_parser.c
@@ -1,13 +1,13 @@
-/* Based on node-formidable by Felix Geisendörfer 
+/* Based on node-formidable by Felix Geisendörfer
  * Igor Afonov - afonov@gmail.com - 2012
  * MIT License - http://www.opensource.org/licenses/mit-license.php
  */
 
 #include "multipart_parser.h"
 
-#include <stdio.h>
-#include <stdarg.h>
-#include <string.h>
+#ifndef tolower
+	int tolower (int __c);
+#endif
 
 static void multipart_log(const char * format, ...)
 {
@@ -43,20 +43,6 @@ do {                                                                   \
 #define LF 10
 #define CR 13
 
-struct multipart_parser {
-  void * data;
-
-  size_t index;
-  size_t boundary_length;
-
-  unsigned char state;
-
-  const multipart_parser_settings* settings;
-
-  char* lookbehind;
-  char multipart_boundary[1];
-};
-
 enum state {
   s_uninitialized = 1,
   s_start,
@@ -77,16 +63,16 @@ enum state {
   s_end
 };
 
-multipart_parser* multipart_parser_init
-    (const char *boundary, const multipart_parser_settings* settings) {
+multipart_parser_t* multipart_parser_init
+    (const char *boundary, const multipart_parser_settings_t * settings) {
 
-  multipart_parser* p = malloc(sizeof(multipart_parser) +
+  multipart_parser_t* p = malloc(sizeof(multipart_parser_t) +
                                strlen(boundary) +
                                strlen(boundary) + 9);
 
   strcpy(p->multipart_boundary, boundary);
   p->boundary_length = strlen(boundary);
-  
+
   p->lookbehind = (p->multipart_boundary + p->boundary_length + 1);
 
   p->index = 0;
@@ -96,22 +82,22 @@ multipart_parser* multipart_parser_init
   return p;
 }
 
-void multipart_parser_free(multipart_parser* p) {
+void multipart_parser_free(multipart_parser_t* p) {
   free(p);
 }
 
-void multipart_parser_set_data(multipart_parser *p, void *data) {
+void multipart_parser_set_data(multipart_parser_t *p, void *data) {
     p->data = data;
 }
 
-void *multipart_parser_get_data(multipart_parser *p) {
+void *multipart_parser_get_data(multipart_parser_t *p) {
     return p->data;
 }
 
-size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len) {
+size_t multipart_parser_execute(multipart_parser_t* p, const char *buf, size_t len) {
   size_t i = 0;
   size_t mark = 0;
-  char c, cl;
+  unsigned char c, cl;
   int is_last = 0;
 
   while(i < len) {
@@ -272,7 +258,7 @@ size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len
             break;
         }
         return i;
-   
+
       case s_part_data_final_hyphen:
         multipart_log("s_part_data_final_hyphen");
         if (c == '-') {
diff --git a/multipart_parser.h b/multipart_parser.h
index 05429d7..3b67a3f 100644
--- a/multipart_parser.h
+++ b/multipart_parser.h
@@ -1,4 +1,4 @@
-/* Based on node-formidable by Felix Geisendörfer 
+/* Based on node-formidable by Felix Geisendörfer
  * Igor Afonov - afonov@gmail.com - 2012
  * MIT License - http://www.opensource.org/licenses/mit-license.php
  */
@@ -10,15 +10,14 @@ extern "C"
 {
 #endif
 
-#include <stdlib.h>
-#include <ctype.h>
+#include <user_config.h>
 
-typedef struct multipart_parser multipart_parser;
-typedef struct multipart_parser_settings multipart_parser_settings;
+typedef struct multipart_parser multipart_parser_t;
+typedef struct multipart_parser_settings multipart_parser_settings_t;
 typedef struct multipart_parser_state multipart_parser_state;
 
-typedef int (*multipart_data_cb) (multipart_parser*, const char *at, size_t length);
-typedef int (*multipart_notify_cb) (multipart_parser*);
+typedef int (*multipart_data_cb) (multipart_parser_t*, const char *at, size_t length);
+typedef int (*multipart_notify_cb) (multipart_parser_t*);
 
 struct multipart_parser_settings {
   multipart_data_cb on_header_field;
@@ -31,15 +30,29 @@ struct multipart_parser_settings {
   multipart_notify_cb on_body_end;
 };
 
-multipart_parser* multipart_parser_init
-    (const char *boundary, const multipart_parser_settings* settings);
+struct multipart_parser {
+  void * data;
 
-void multipart_parser_free(multipart_parser* p);
+  size_t index;
+  size_t boundary_length;
 
-size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len);
+  unsigned char state;
 
-void multipart_parser_set_data(multipart_parser* p, void* data);
-void * multipart_parser_get_data(multipart_parser* p);
+  const multipart_parser_settings_t * settings;
+
+  char* lookbehind;
+  char multipart_boundary[1];
+};
+
+multipart_parser_t* multipart_parser_init
+    (const char *boundary, const multipart_parser_settings_t* settings);
+
+void multipart_parser_free(multipart_parser_t* p);
+
+size_t multipart_parser_execute(multipart_parser_t* p, const char *buf, size_t len);
+
+void multipart_parser_set_data(multipart_parser_t* p, void* data);
+void * multipart_parser_get_data(multipart_parser_t* p);
 
 #ifdef __cplusplus
 } /* extern "C" */
