diff --git a/component.mk b/component.mk
new file mode 100644
index 0000000..12f0ff7
--- /dev/null
+++ b/component.mk
@@ -0,0 +1,2 @@
+COMPONENT_SRCDIRS :=
+COMPONENT_SRCFILES := http_parser.c
diff --git a/http_parser.c b/http_parser.c
index 5b5657b..b523e35 100644
--- a/http_parser.c
+++ b/http_parser.c
@@ -19,8 +19,7 @@
  * IN THE SOFTWARE.
  */
 #include "http_parser.h"
-#include <assert.h>
-#include <stddef.h>
+#include <user_config.h>
 #include <ctype.h>
 #include <string.h>
 #include <limits.h>
@@ -182,7 +181,7 @@ static const char *method_strings[] =
  *                    | "/" | "[" | "]" | "?" | "="
  *                    | "{" | "}" | SP | HT
  */
-static const char tokens[256] = {
+static const char __flash_tokens[256] PROGMEM = {
 /*   0 nul    1 soh    2 stx    3 etx    4 eot    5 enq    6 ack    7 bel  */
         0,       0,       0,       0,       0,       0,       0,       0,
 /*   8 bs     9 ht    10 nl    11 vt    12 np    13 cr    14 so    15 si   */
@@ -216,18 +215,10 @@ static const char tokens[256] = {
 /* 120  x   121  y   122  z   123  {   124  |   125  }   126  ~   127 del */
        'x',     'y',     'z',      0,      '|',      0,      '~',       0 };
 
-
-static const int8_t unhex[256] =
-  {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
-  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
-  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
-  , 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,-1,-1,-1,-1,-1,-1
-  ,-1,10,11,12,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1
-  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
-  ,-1,10,11,12,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1
-  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
-  };
-
+static inline char get_token(char c)
+{
+	return (char)pgm_read_byte(&__flash_tokens[(uint8_t)c]);
+}
 
 #if HTTP_PARSER_STRICT
 # define T(v) 0
@@ -236,7 +227,7 @@ static const int8_t unhex[256] =
 #endif
 
 
-static const uint8_t normal_url_char[32] = {
+static const uint8_t normal_url_char[32] PROGMEM_L32 = {
 /*   0 nul    1 soh    2 stx    3 etx    4 eot    5 enq    6 ack    7 bel  */
         0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,
 /*   8 bs     9 ht    10 nl    11 vt    12 np    13 cr    14 so    15 si   */
@@ -417,14 +408,14 @@ enum http_host_state
   (c) == ';' || (c) == ':' || (c) == '&' || (c) == '=' || (c) == '+' || \
   (c) == '$' || (c) == ',')
 
-#define STRICT_TOKEN(c)     (tokens[(unsigned char)c])
+#define STRICT_TOKEN(c)     get_token(c)
 
 #if HTTP_PARSER_STRICT
-#define TOKEN(c)            (tokens[(unsigned char)c])
+#define TOKEN(c)            get_token(c)
 #define IS_URL_CHAR(c)      (BIT_AT(normal_url_char, (unsigned char)c))
 #define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')
 #else
-#define TOKEN(c)            ((c == ' ') ? ' ' : tokens[(unsigned char)c])
+#define TOKEN(c)            ((c == ' ') ? ' ' : get_token(c)
 #define IS_URL_CHAR(c)                                                         \
   (BIT_AT(normal_url_char, (unsigned char)c) || ((c) & 0x80))
 #define IS_HOST_CHAR(c)                                                        \
@@ -456,16 +447,6 @@ do {                                                                 \
 #endif
 
 
-/* Map errno values to strings for human-readable output */
-#define HTTP_STRERROR_GEN(n, s) { "HPE_" #n, s },
-static struct {
-  const char *name;
-  const char *description;
-} http_strerror_tab[] = {
-  HTTP_ERRNO_MAP(HTTP_STRERROR_GEN)
-};
-#undef HTTP_STRERROR_GEN
-
 int http_message_needs_eof(const http_parser *parser);
 
 /* Our URL parser.
@@ -1874,7 +1855,7 @@ reexecute:
         assert(parser->nread == 1);
         assert(parser->flags & F_CHUNKED);
 
-        unhex_val = unhex[(unsigned char)ch];
+        unhex_val = unhex(ch);
         if (UNLIKELY(unhex_val == -1)) {
           SET_ERRNO(HPE_INVALID_CHUNK_SIZE);
           goto error;
@@ -1896,7 +1877,7 @@ reexecute:
           break;
         }
 
-        unhex_val = unhex[(unsigned char)ch];
+        unhex_val = unhex(ch);
 
         if (unhex_val == -1) {
           if (ch == ';' || ch == ' ') {
@@ -2096,18 +2077,6 @@ http_parser_settings_init(http_parser_settings *settings)
   memset(settings, 0, sizeof(*settings));
 }
 
-const char *
-http_errno_name(enum http_errno err) {
-  assert(((size_t) err) < ARRAY_SIZE(http_strerror_tab));
-  return http_strerror_tab[err].name;
-}
-
-const char *
-http_errno_description(enum http_errno err) {
-  assert(((size_t) err) < ARRAY_SIZE(http_strerror_tab));
-  return http_strerror_tab[err].description;
-}
-
 static enum http_host_state
 http_parse_host_char(enum http_host_state s, const char ch) {
   switch(s) {
