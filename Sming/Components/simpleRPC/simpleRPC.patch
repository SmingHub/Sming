diff --git a/src/read.tcc b/src/read.tcc
index 34b281f..d77a5a2 100644
--- a/src/read.tcc
+++ b/src/read.tcc
@@ -3,7 +3,6 @@
 
 #include "defs.h"
 #include "tuple.tcc"
-#include "vector.tcc"
 
 //! \defgroup read
 
diff --git a/src/rpcCall.tcc b/src/rpcCall.tcc
index 408d81d..9338e78 100644
--- a/src/rpcCall.tcc
+++ b/src/rpcCall.tcc
@@ -111,6 +111,9 @@ void rpcCall(Stream& io, R (*f)(FArgs...)) {
   _call(io, (void (*)(FArgs...))f, f);
 }
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wpmf-conversions"
+
 /*! \ingroup call
  * Call a class method.
  *
@@ -125,4 +128,6 @@ void rpcCall(Stream& io, Tuple<C*, R (P::*)(FArgs...)> t) {
   _call(io, (void (*)(FArgs...))t.tail.head, t);
 }
 
+#pragma GCC diagnostic pop
+
 #endif
diff --git a/src/signature.tcc b/src/signature.tcc
index bc51111..fc0f0df 100644
--- a/src/signature.tcc
+++ b/src/signature.tcc
@@ -25,7 +25,7 @@ void _parameterTypes(Stream& io, void (*f_)(H, Tail...)) {
    * `rpcTypeOf()` to encode its type. The first parameter type `H` is removed
    * from function pointer `*f_` in the recursive call.
    */
-  H data;
+  H data{};
 
   rpcPrint(io, ' ');
   rpcTypeOf(io, data);
@@ -49,19 +49,22 @@ void _parameterTypes(Stream& io, void (*f_)(H&, Tail...)) {
  */
 template <class R, class... FArgs>
 void signature(Stream& io, R (*f)(FArgs...)) {
-  /* 
+  /*
    * A dummy function pointer is prepared, referred to as `f_` in the template
    * functions above, which will be used to isolate parameter types. The return
    * type of this function pointer is removed to avoid unneeded template
    * expansion.
    */
-  R data;
+  R data{};
 
   rpcTypeOf(io, data);
   rpcPrint(io, ':');
   _parameterTypes(io, (void (*)(FArgs...))f);
 }
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wpmf-conversions"
+
 /*! \ingroup signature
  * \copydoc signature(Stream&, R (*)(FArgs...)) */
 template <class R, class C, class... FArgs>
@@ -69,6 +72,8 @@ void signature(Stream& io, R (C::*f)(FArgs...)) {
   signature(io, (R (*)(FArgs...))f);
 }
 
+#pragma GCC diagnostic pop
+
 /*! \ingroup signature
  * \copydoc signature(Stream&, R (*)(FArgs...)) */
 template <class... FArgs>
@@ -77,6 +82,9 @@ void signature(Stream& io, void (*f)(FArgs...)) {
   _parameterTypes(io, f);
 }
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wpmf-conversions"
+
 /*! \ingroup signature
  * \copydoc signature(Stream&, R (*)(FArgs...)) */
 template <class C, class... FArgs>
@@ -84,4 +92,6 @@ void signature(Stream& io, void (C::*f)(FArgs...)) {
   signature(io, (void (*)(FArgs...))f);
 }
 
+#pragma GCC diagnostic pop
+
 #endif
diff --git a/src/types.tcc b/src/types.tcc
index 05b3c67..7f11f63 100644
--- a/src/types.tcc
+++ b/src/types.tcc
@@ -3,7 +3,6 @@
 
 #include "print.tcc"
 #include "tuple.tcc"
-#include "vector.tcc"
 
 //! \defgroup types
 
@@ -177,7 +176,7 @@ void rpcTypeOf(Stream& io, Vector<T>&) {
  * \copydoc rpcTypeOf(Stream&, bool) */
 template <class T>
 void rpcTypeOf(Stream& io, T*) {
-  T x;
+  T x{};
 
   rpcPrint(io, '[');
   rpcTypeOf(io, x);
diff --git a/src/write.tcc b/src/write.tcc
index e702281..84e3db4 100644
--- a/src/write.tcc
+++ b/src/write.tcc
@@ -3,7 +3,6 @@
 
 #include "print.tcc"
 #include "tuple.tcc"
-#include "vector.tcc"
 
 //! \defgroup write
 
diff --git a/src/defs.h b/src/defs.h
index 8d2ec2a..93edaf5 100644
--- a/src/defs.h
+++ b/src/defs.h
@@ -1,7 +1,7 @@
 #ifndef SIMPLE_RPC_DEFS_H_
 #define SIMPLE_RPC_DEFS_H_
 
-#include <Arduino.h>
+#include <Stream.h>
 
 #define _PROTOCOL "simpleRPC"
 #define _VERSION "\3\0\0"
