diff --git a/src/arduinoFFT.h b/src/arduinoFFT.h
index 73927dc..3436c9d 100644
--- a/src/arduinoFFT.h
+++ b/src/arduinoFFT.h
@@ -75,21 +75,11 @@
 class arduinoFFT {
 public:
 	/* Constructor */
-	arduinoFFT(void);
 	arduinoFFT(double *vReal, double *vImag, uint16_t samples, double samplingFrequency);
-	/* Destructor */
-	~arduinoFFT(void);
 	/* Functions */
 	uint8_t Revision(void);
 	uint8_t Exponent(uint16_t value);
 
-	void ComplexToMagnitude(double *vReal, double *vImag, uint16_t samples);
-	void Compute(double *vReal, double *vImag, uint16_t samples, uint8_t dir);
-	void Compute(double *vReal, double *vImag, uint16_t samples, uint8_t power, uint8_t dir);
-	void DCRemoval(double *vData, uint16_t samples);
-	double MajorPeak(double *vD, uint16_t samples, double samplingFrequency);
-	void MajorPeak(double *vD, uint16_t samples, double samplingFrequency, double *f, double *v);
-	void Windowing(double *vData, uint16_t samples, uint8_t windowType, uint8_t dir);
 
 	void ComplexToMagnitude();
 	void Compute(uint8_t dir);
diff --git a/src/arduinoFFT.cpp b/src/arduinoFFT.cpp
index 790da4f..dcdcfae 100644
--- a/src/arduinoFFT.cpp
+++ b/src/arduinoFFT.cpp
@@ -21,11 +21,6 @@
 
 #include "arduinoFFT.h"
 
-arduinoFFT::arduinoFFT(void)
-{ // Constructor
-	#warning("This method is deprecated and may be removed on future revisions.")
-}
-
 arduinoFFT::arduinoFFT(double *vReal, double *vImag, uint16_t samples, double samplingFrequency)
 {// Constructor
 	this->_vReal = vReal;
@@ -35,22 +30,11 @@ arduinoFFT::arduinoFFT(double *vReal, double *vImag, uint16_t samples, double sa
 	this->_power = Exponent(samples);
 }
 
-arduinoFFT::~arduinoFFT(void)
-{
-// Destructor
-}
-
 uint8_t arduinoFFT::Revision(void)
 {
 	return(FFT_LIB_REV);
 }
 
-void arduinoFFT::Compute(double *vReal, double *vImag, uint16_t samples, uint8_t dir)
-{
-	#warning("This method is deprecated and may be removed on future revisions.")
-	Compute(vReal, vImag, samples, Exponent(samples), dir);
-}
-
 void arduinoFFT::Compute(uint8_t dir)
 {// Computes in-place complex-to-complex FFT /
 	// Reverse bits /
@@ -115,71 +99,6 @@ void arduinoFFT::Compute(uint8_t dir)
 	}
 }
 
-void arduinoFFT::Compute(double *vReal, double *vImag, uint16_t samples, uint8_t power, uint8_t dir)
-{	// Computes in-place complex-to-complex FFT
-	// Reverse bits
-	#warning("This method is deprecated and may be removed on future revisions.")
-	uint16_t j = 0;
-	for (uint16_t i = 0; i < (samples - 1); i++) {
-		if (i < j) {
-			Swap(&vReal[i], &vReal[j]);
-			if(dir==FFT_REVERSE)
-				Swap(&vImag[i], &vImag[j]);
-		}
-		uint16_t k = (samples >> 1);
-		while (k <= j) {
-			j -= k;
-			k >>= 1;
-		}
-		j += k;
-	}
-	// Compute the FFT
-#ifdef __AVR__
-	uint8_t index = 0;
-#endif
-	double c1 = -1.0;
-	double c2 = 0.0;
-	uint16_t l2 = 1;
-	for (uint8_t l = 0; (l < power); l++) {
-		uint16_t l1 = l2;
-		l2 <<= 1;
-		double u1 = 1.0;
-		double u2 = 0.0;
-		for (j = 0; j < l1; j++) {
-			 for (uint16_t i = j; i < samples; i += l2) {
-					uint16_t i1 = i + l1;
-					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
-					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
-					vReal[i1] = vReal[i] - t1;
-					vImag[i1] = vImag[i] - t2;
-					vReal[i] += t1;
-					vImag[i] += t2;
-			 }
-			 double z = ((u1 * c1) - (u2 * c2));
-			 u2 = ((u1 * c2) + (u2 * c1));
-			 u1 = z;
-		}
-#ifdef __AVR__
-		c2 = pgm_read_float_near(&(_c2[index]));
-		c1 = pgm_read_float_near(&(_c1[index]));
-		index++;
-#else
-		c2 = sqrt((1.0 - c1) / 2.0);
-		c1 = sqrt((1.0 + c1) / 2.0);
-#endif
-		if (dir == FFT_FORWARD) {
-			c2 = -c2;
-		}
-	}
-	// Scaling for reverse transform
-	if (dir != FFT_FORWARD) {
-		for (uint16_t i = 0; i < samples; i++) {
-			 vReal[i] /= samples;
-			 vImag[i] /= samples;
-		}
-	}
-}
-
 void arduinoFFT::ComplexToMagnitude()
 { // vM is half the size of vReal and vImag
 	for (uint16_t i = 0; i < this->_samples; i++) {
@@ -187,14 +106,6 @@ void arduinoFFT::ComplexToMagnitude()
 	}
 }
 
-void arduinoFFT::ComplexToMagnitude(double *vReal, double *vImag, uint16_t samples)
-{	// vM is half the size of vReal and vImag
-	#warning("This method is deprecated and may be removed on future revisions.")
-	for (uint16_t i = 0; i < samples; i++) {
-		vReal[i] = sqrt(sq(vReal[i]) + sq(vImag[i]));
-	}
-}
-
 void arduinoFFT::DCRemoval()
 {
 	// calculate the mean of vData
@@ -211,23 +122,6 @@ void arduinoFFT::DCRemoval()
 	}
 }
 
-void arduinoFFT::DCRemoval(double *vData, uint16_t samples)
-{
-	// calculate the mean of vData
-	#warning("This method is deprecated and may be removed on future revisions.")
-	double mean = 0;
-	for (uint16_t i = 0; i < samples; i++)
-	{
-		mean += vData[i];
-	}
-	mean /= samples;
-	// Subtract the mean from vData
-	for (uint16_t i = 0; i < samples; i++)
-	{
-		vData[i] -= mean;
-	}
-}
-
 void arduinoFFT::Windowing(uint8_t windowType, uint8_t dir)
 {// Weighing factors are computed once before multiple use of FFT
 // The weighing function is symetric; half the weighs are recorded
@@ -285,63 +179,6 @@ void arduinoFFT::Windowing(uint8_t windowType, uint8_t dir)
 }
 
 
-void arduinoFFT::Windowing(double *vData, uint16_t samples, uint8_t windowType, uint8_t dir)
-{// Weighing factors are computed once before multiple use of FFT
-// The weighing function is symetric; half the weighs are recorded
-	#warning("This method is deprecated and may be removed on future revisions.")
-	double samplesMinusOne = (double(samples) - 1.0);
-	for (uint16_t i = 0; i < (samples >> 1); i++) {
-		double indexMinusOne = double(i);
-		double ratio = (indexMinusOne / samplesMinusOne);
-		double weighingFactor = 1.0;
-		// Compute and record weighting factor
-		switch (windowType) {
-		case FFT_WIN_TYP_RECTANGLE: // rectangle (box car)
-			weighingFactor = 1.0;
-			break;
-		case FFT_WIN_TYP_HAMMING: // hamming
-			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
-			break;
-		case FFT_WIN_TYP_HANN: // hann
-			weighingFactor = 0.54 * (1.0 - cos(twoPi * ratio));
-			break;
-		case FFT_WIN_TYP_TRIANGLE: // triangle (Bartlett)
-			#if defined(ESP8266) || defined(ESP32)
-			weighingFactor = 1.0 - ((2.0 * fabs(indexMinusOne - (samplesMinusOne / 2.0))) / samplesMinusOne);
-			#else
-			weighingFactor = 1.0 - ((2.0 * abs(indexMinusOne - (samplesMinusOne / 2.0))) / samplesMinusOne);
-			#endif
-			break;
-		case FFT_WIN_TYP_NUTTALL: // nuttall
-			weighingFactor = 0.355768 - (0.487396 * (cos(twoPi * ratio))) + (0.144232 * (cos(fourPi * ratio))) - (0.012604 * (cos(sixPi * ratio)));
-			break;
-		case FFT_WIN_TYP_BLACKMAN: // blackman
-			weighingFactor = 0.42323 - (0.49755 * (cos(twoPi * ratio))) + (0.07922 * (cos(fourPi * ratio)));
-			break;
-		case FFT_WIN_TYP_BLACKMAN_NUTTALL: // blackman nuttall
-			weighingFactor = 0.3635819 - (0.4891775 * (cos(twoPi * ratio))) + (0.1365995 * (cos(fourPi * ratio))) - (0.0106411 * (cos(sixPi * ratio)));
-			break;
-		case FFT_WIN_TYP_BLACKMAN_HARRIS: // blackman harris
-			weighingFactor = 0.35875 - (0.48829 * (cos(twoPi * ratio))) + (0.14128 * (cos(fourPi * ratio))) - (0.01168 * (cos(sixPi * ratio)));
-			break;
-		case FFT_WIN_TYP_FLT_TOP: // flat top
-			weighingFactor = 0.2810639 - (0.5208972 * cos(twoPi * ratio)) + (0.1980399 * cos(fourPi * ratio));
-			break;
-		case FFT_WIN_TYP_WELCH: // welch
-			weighingFactor = 1.0 - sq((indexMinusOne - samplesMinusOne / 2.0) / (samplesMinusOne / 2.0));
-			break;
-		}
-		if (dir == FFT_FORWARD) {
-			vData[i] *= weighingFactor;
-			vData[samples - (i + 1)] *= weighingFactor;
-		}
-		else {
-			vData[i] /= weighingFactor;
-			vData[samples - (i + 1)] /= weighingFactor;
-		}
-	}
-}
-
 double arduinoFFT::MajorPeak()
 {
 	double maxY = 0;
@@ -391,61 +228,8 @@ void arduinoFFT::MajorPeak(double *f, double *v)
 	#endif
 }
 
-double arduinoFFT::MajorPeak(double *vD, uint16_t samples, double samplingFrequency)
-{
-	#warning("This method is deprecated and may be removed on future revisions.")
-	double maxY = 0;
-	uint16_t IndexOfMaxY = 0;
-	//If sampling_frequency = 2 * max_frequency in signal,
-	//value would be stored at position samples/2
-	for (uint16_t i = 1; i < ((samples >> 1) + 1); i++) {
-		if ((vD[i-1] < vD[i]) && (vD[i] > vD[i+1])) {
-			if (vD[i] > maxY) {
-				maxY = vD[i];
-				IndexOfMaxY = i;
-			}
-		}
-	}
-	double delta = 0.5 * ((vD[IndexOfMaxY-1] - vD[IndexOfMaxY+1]) / (vD[IndexOfMaxY-1] - (2.0 * vD[IndexOfMaxY]) + vD[IndexOfMaxY+1]));
-	double interpolatedX = ((IndexOfMaxY + delta)  * samplingFrequency) / (samples-1);
-	if(IndexOfMaxY==(samples >> 1)) //To improve calculation on edge values
-		interpolatedX = ((IndexOfMaxY + delta)  * samplingFrequency) / (samples);
-	// returned value: interpolated frequency peak apex
-	return(interpolatedX);
-}
-
-void arduinoFFT::MajorPeak(double *vD, uint16_t samples, double samplingFrequency, double *f, double *v)
-{
-	#warning("This method is deprecated and may be removed on future revisions.")
-	double maxY = 0;
-	uint16_t IndexOfMaxY = 0;
-	//If sampling_frequency = 2 * max_frequency in signal,
-	//value would be stored at position samples/2
-	for (uint16_t i = 1; i < ((samples >> 1) + 1); i++) {
-		if ((vD[i - 1] < vD[i]) && (vD[i] > vD[i + 1])) {
-			if (vD[i] > maxY) {
-				maxY = vD[i];
-				IndexOfMaxY = i;
-			}
-		}
-	}
-	double delta = 0.5 * ((vD[IndexOfMaxY - 1] - vD[IndexOfMaxY + 1]) / (vD[IndexOfMaxY - 1] - (2.0 * vD[IndexOfMaxY]) + vD[IndexOfMaxY + 1]));
-	double interpolatedX = ((IndexOfMaxY + delta)  * samplingFrequency) / (samples - 1);
-	//double popo =
-	if (IndexOfMaxY == (samples >> 1)) //To improve calculation on edge values
-		interpolatedX = ((IndexOfMaxY + delta)  * samplingFrequency) / (samples);
-	// returned value: interpolated frequency peak apex
-	*f = interpolatedX;
-	#if defined(ESP8266) || defined(ESP32)
-	*v = fabs(vD[IndexOfMaxY - 1] - (2.0 * vD[IndexOfMaxY]) + vD[IndexOfMaxY + 1]);
-	#else
-	*v = abs(vD[IndexOfMaxY - 1] - (2.0 * vD[IndexOfMaxY]) + vD[IndexOfMaxY + 1]);
-	#endif
-}
-
 uint8_t arduinoFFT::Exponent(uint16_t value)
 {
-	#warning("This method may not be accessible on future revisions.")
 	// Calculates the base 2 logarithm of a value
 	uint8_t result = 0;
 	while (((value >> result) & 1) != 1) result++;
 	