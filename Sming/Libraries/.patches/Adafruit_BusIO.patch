diff --git a/Adafruit_SPIDevice.h b/Adafruit_SPIDevice.h
index 921030a..170dce3 100644
--- a/Adafruit_SPIDevice.h
+++ b/Adafruit_SPIDevice.h
@@ -1,67 +1,21 @@
 #include <Arduino.h>
-
-#if !defined(SPI_INTERFACES_COUNT) ||                                          \
-    (defined(SPI_INTERFACES_COUNT) && (SPI_INTERFACES_COUNT > 0))
-
 #include <SPI.h>
 
 #ifndef Adafruit_SPIDevice_h
 #define Adafruit_SPIDevice_h
 
-// some modern SPI definitions don't have BitOrder enum
-#if (defined(__AVR__) && !defined(ARDUINO_ARCH_MEGAAVR)) ||                    \
-    defined(ESP8266) || defined(TEENSYDUINO) || defined(SPARK) ||              \
-    defined(ARDUINO_ARCH_SPRESENSE) || defined(MEGATINYCORE) ||                \
-    defined(DXCORE) || defined(ARDUINO_AVR_ATmega4809) ||                      \
-    defined(ARDUINO_AVR_ATmega4808) || defined(ARDUINO_AVR_ATmega3209) ||      \
-    defined(ARDUINO_AVR_ATmega3208) || defined(ARDUINO_AVR_ATmega1609) ||      \
-    defined(ARDUINO_AVR_ATmega1608) || defined(ARDUINO_AVR_ATmega809) ||       \
-    defined(ARDUINO_AVR_ATmega808) || defined(ARDUINO_ARCH_ARC32)
-
 typedef enum _BitOrder {
   SPI_BITORDER_MSBFIRST = MSBFIRST,
   SPI_BITORDER_LSBFIRST = LSBFIRST,
 } BusIOBitOrder;
 
-#elif defined(ESP32) || defined(__ASR6501__)
-
-// some modern SPI definitions don't have BitOrder enum and have different SPI
-// mode defines
-typedef enum _BitOrder {
-  SPI_BITORDER_MSBFIRST = SPI_MSBFIRST,
-  SPI_BITORDER_LSBFIRST = SPI_LSBFIRST,
-} BusIOBitOrder;
-
-#else
-// Some platforms have a BitOrder enum but its named MSBFIRST/LSBFIRST
-#define SPI_BITORDER_MSBFIRST MSBFIRST
-#define SPI_BITORDER_LSBFIRST LSBFIRST
-typedef BitOrder BusIOBitOrder;
-#endif
-
-#if defined(__AVR__) || defined(TEENSYDUINO)
-typedef volatile uint8_t BusIO_PortReg;
-typedef uint8_t BusIO_PortMask;
-#define BUSIO_USE_FAST_PINIO
-
-#elif defined(ESP8266) || defined(ESP32) || defined(__SAM3X8E__) ||            \
-    defined(ARDUINO_ARCH_SAMD)
 typedef volatile uint32_t BusIO_PortReg;
 typedef uint32_t BusIO_PortMask;
-#define BUSIO_USE_FAST_PINIO
 
-#elif (defined(__arm__) || defined(ARDUINO_FEATHER52)) &&                      \
-    !defined(ARDUINO_ARCH_MBED) && !defined(ARDUINO_ARCH_RP2040)
-typedef volatile uint32_t BusIO_PortReg;
-typedef uint32_t BusIO_PortMask;
-#if not defined(__ASR6501__)
+#ifdef ARCH_ESP8266
 #define BUSIO_USE_FAST_PINIO
 #endif
 
-#else
-#undef BUSIO_USE_FAST_PINIO
-#endif
-
 /**! The class which defines how we will talk to this device over SPI **/
 class Adafruit_SPIDevice {
 public:
@@ -104,4 +58,3 @@ private:
 };
 
 #endif // Adafruit_SPIDevice_h
-#endif // has SPI defined
diff --git a/README.md b/README.md
index 3fc8a1f..fba70bd 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,6 @@
-# Adafruit Bus IO Library [![Build Status](https://github.com/adafruit/Adafruit_BusIO/workflows/Arduino%20Library%20CI/badge.svg)](https://github.com/adafruit/Adafruit_BusIO/actions)
+# Adafruit Bus IO Library
 
+[![Build Status](https://github.com/adafruit/Adafruit_BusIO/workflows/Arduino%20Library%20CI/badge.svg)](https://github.com/adafruit/Adafruit_BusIO/actions)
 
 This is a helper libary to abstract away I2C & SPI transactions and registers
 
