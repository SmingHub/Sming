diff --git a/multipart_parser.c b/multipart_parser.c
index 981dabb..c1c8d50 100644
--- a/multipart_parser.c
+++ b/multipart_parser.c
@@ -5,9 +5,9 @@
 
 #include "multipart_parser.h"
 
-#include <stdio.h>
-#include <stdarg.h>
-#include <string.h>
+#ifndef tolower
+	int tolower (int __c);
+#endif
 
 static void multipart_log(const char * format, ...)
 {
@@ -43,24 +43,12 @@ do {                                                                   \
 #define LF 10
 #define CR 13
 
-struct multipart_parser {
-  void * data;
-
-  size_t index;
-  size_t boundary_length;
-
-  unsigned char state;
-
-  const multipart_parser_settings* settings;
-
-  char* lookbehind;
-  char multipart_boundary[1];
-};
-
 enum state {
   s_uninitialized = 1,
   s_start,
   s_start_boundary,
+  s_preamble,
+  s_preamble_almost_done,
   s_header_field_start,
   s_header_field,
   s_headers_almost_done,
@@ -74,44 +62,24 @@ enum state {
   s_part_data_almost_end,
   s_part_data_end,
   s_part_data_final_hyphen,
-  s_end
+  s_epilogue
 };
 
-multipart_parser* multipart_parser_init
-    (const char *boundary, const multipart_parser_settings* settings) {
+void multipart_parser_init
+    (multipart_parser_t* p, const char *boundary, size_t boundary_length, const multipart_parser_settings_t * settings) {
 
-  multipart_parser* p = malloc(sizeof(multipart_parser) +
-                               strlen(boundary) +
-                               strlen(boundary) + 9);
-
-  strcpy(p->multipart_boundary, boundary);
-  p->boundary_length = strlen(boundary);
-  
-  p->lookbehind = (p->multipart_boundary + p->boundary_length + 1);
+  p->multipart_boundary = boundary;
+  p->boundary_length = boundary_length;
 
   p->index = 0;
   p->state = s_start;
   p->settings = settings;
-
-  return p;
-}
-
-void multipart_parser_free(multipart_parser* p) {
-  free(p);
-}
-
-void multipart_parser_set_data(multipart_parser *p, void *data) {
-    p->data = data;
 }
 
-void *multipart_parser_get_data(multipart_parser *p) {
-    return p->data;
-}
-
-size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len) {
+size_t multipart_parser_execute(multipart_parser_t* p, const char *buf, size_t len) {
   size_t i = 0;
   size_t mark = 0;
-  char c, cl;
+  unsigned char c, cl;
   int is_last = 0;
 
   while(i < len) {
@@ -142,9 +110,29 @@ size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len
           break;
         }
         if (c != p->multipart_boundary[p->index]) {
-          return i;
+          p->state = s_preamble;
+          --i;
+        } else {
+          p->index++;
+        }
+        break;
+
+      case s_preamble:
+        multipart_log("s_preamble");
+        if (c == CR) {
+          p->state = s_preamble_almost_done;
+        }
+        break;
+      
+      case s_preamble_almost_done:
+        multipart_log("s_preamble_almost_done");
+        if (c == LF) {
+          p->index = 0;
+          p->state = s_start_boundary;
+        } else {
+          p->state = s_preamble;
+          --i;
         }
-        p->index++;
         break;
 
       case s_header_field_start:
@@ -226,7 +214,6 @@ size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len
             EMIT_DATA_CB(part_data, buf + mark, i - mark);
             mark = i;
             p->state = s_part_data_almost_boundary;
-            p->lookbehind[0] = CR;
             break;
         }
         if (is_last)
@@ -237,11 +224,10 @@ size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len
         multipart_log("s_part_data_almost_boundary");
         if (c == LF) {
             p->state = s_part_data_boundary;
-            p->lookbehind[1] = LF;
             p->index = 0;
             break;
         }
-        EMIT_DATA_CB(part_data, p->lookbehind, 1);
+        EMIT_DATA_CB(part_data, "\r", 1);
         p->state = s_part_data;
         mark = i --;
         break;
@@ -249,12 +235,14 @@ size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len
       case s_part_data_boundary:
         multipart_log("s_part_data_boundary");
         if (p->multipart_boundary[p->index] != c) {
-          EMIT_DATA_CB(part_data, p->lookbehind, 2 + p->index);
+          EMIT_DATA_CB(part_data, "\r\n", 2);
+          if (p->index > 0) {
+            EMIT_DATA_CB(part_data, p->multipart_boundary, p->index);
+          }
           p->state = s_part_data;
           mark = i --;
           break;
         }
-        p->lookbehind[2 + p->index] = c;
         if ((++ p->index) == p->boundary_length) {
             NOTIFY_CB(part_data_end);
             p->state = s_part_data_almost_end;
@@ -277,7 +265,7 @@ size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len
         multipart_log("s_part_data_final_hyphen");
         if (c == '-') {
             NOTIFY_CB(body_end);
-            p->state = s_end;
+            p->state = s_epilogue;
             break;
         }
         return i;
@@ -291,8 +279,8 @@ size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len
         }
         return i;
 
-      case s_end:
-        multipart_log("s_end: %02X", (int) c);
+      case s_epilogue:
+        multipart_log("s_epilogue: %02X", (int) c);
         break;
 
       default:
diff --git a/multipart_parser.h b/multipart_parser.h
index 05429d7..a6c040f 100644
--- a/multipart_parser.h
+++ b/multipart_parser.h
@@ -11,14 +11,13 @@ extern "C"
 #endif
 
 #include <stdlib.h>
-#include <ctype.h>
 
-typedef struct multipart_parser multipart_parser;
-typedef struct multipart_parser_settings multipart_parser_settings;
+typedef struct multipart_parser multipart_parser_t;
+typedef struct multipart_parser_settings multipart_parser_settings_t;
 typedef struct multipart_parser_state multipart_parser_state;
 
-typedef int (*multipart_data_cb) (multipart_parser*, const char *at, size_t length);
-typedef int (*multipart_notify_cb) (multipart_parser*);
+typedef int (*multipart_data_cb) (multipart_parser_t*, const char *at, size_t length);
+typedef int (*multipart_notify_cb) (multipart_parser_t*);
 
 struct multipart_parser_settings {
   multipart_data_cb on_header_field;
@@ -31,15 +30,23 @@ struct multipart_parser_settings {
   multipart_notify_cb on_body_end;
 };
 
-multipart_parser* multipart_parser_init
-    (const char *boundary, const multipart_parser_settings* settings);
+struct multipart_parser {
+  void* data;
 
-void multipart_parser_free(multipart_parser* p);
+  size_t index;
+  size_t boundary_length;
 
-size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len);
+  unsigned char state;
 
-void multipart_parser_set_data(multipart_parser* p, void* data);
-void * multipart_parser_get_data(multipart_parser* p);
+  const multipart_parser_settings_t* settings;
+
+  const char *multipart_boundary;
+};
+
+/* The string pointed to by 'boundary' must stay constant and valid throughout the lifetime of the parser. */
+void multipart_parser_init(multipart_parser_t* p, const char* boundary, size_t boundary_length, const multipart_parser_settings_t* settings);
+
+size_t multipart_parser_execute(multipart_parser_t* p, const char* buf, size_t len);
 
 #ifdef __cplusplus
 } /* extern "C" */
