diff --git a/Makefile b/Makefile
index ca234de..5f1c72b 100644
--- a/Makefile
+++ b/Makefile
@@ -22,10 +22,16 @@ else
 Q := @
 endif

-CFLAGS    = -Os -O3 -Wpointer-arith -Wundef -Werror -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals  -D__ets__ -DICACHE_FLASH
+CFLAGS    = -Wpointer-arith -Wundef -Werror -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals  -D__ets__ -DICACHE_FLASH
 LDFLAGS   = -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static
 LD_SCRIPT = eagle.app.v6.ld

+ifeq ($(ENABLE_GDB),1)
+	CFLAGS += -Og -ggdb -DGDBSTUB_FREERTOS=0 -DENABLE_GDB=1 -DGDBSTUB_CTRLC_BREAK=0
+else
+	CFLAGS += -Os -O3
+endif
+
 E2_OPTS = -quiet -bin -boot0

 ifeq ($(RBOOT_BIG_FLASH),1)
@@ -55,6 +61,16 @@ endif
 ifeq ($(RBOOT_IROM_CHKSUM),1)
 	CFLAGS += -DBOOT_IROM_CHKSUM
 endif
+ifneq ($(RBOOT_ROM1_ADDR),)
+	CFLAGS += -DBOOT_ROM1_ADDR=$(RBOOT_ROM1_ADDR)
+endif
+ifneq ($(RBOOT_ROM2_ADDR),)
+	CFLAGS += -DBOOT_ROM2_ADDR=$(RBOOT_ROM2_ADDR)
+endif
+ifeq ($(RBOOT_SILENT),1)
+	CFLAGS += -DBOOT_SILENT=$(RBOOT_SILENT)
+endif
+
 ifneq ($(RBOOT_EXTRA_INCDIR),)
 	CFLAGS += $(addprefix -I,$(RBOOT_EXTRA_INCDIR))
 endif
diff --git a/rboot.c b/rboot.c
index 6e10a2f..03cc87b 100644
--- a/rboot.c
+++ b/rboot.c
@@ -250,7 +250,25 @@ static uint8 calc_chksum(uint8 *start, uint8 *end) {
 static uint8 default_config(rboot_config *romconf, uint32 flashsize) {
 	romconf->count = 2;
 	romconf->roms[0] = SECTOR_SIZE * (BOOT_CONFIG_SECTOR + 1);
+
+#ifdef BOOT_ROM1_ADDR
+	romconf->roms[1] = BOOT_ROM1_ADDR;
+#else
 	romconf->roms[1] = (flashsize / 2) + (SECTOR_SIZE * (BOOT_CONFIG_SECTOR + 1));
+#endif
+
+#if defined(BOOT_BIG_FLASH) && defined(BOOT_GPIO_ENABLED)
+	if(flashsize > 0x200000) {
+		romconf->count += 1;
+#ifdef BOOT_ROM2_ADDR
+		romconf->roms[2] = BOOT_ROM2_ADDR;
+#else
+		romconf->roms[2] = 0x310000;
+#endif
+		romconf->gpio_rom = 2;
+	}
+#endif
+
 #ifdef BOOT_GPIO_ENABLED
 	romconf->mode = MODE_GPIO_ROM;
 #endif
@@ -291,86 +309,94 @@ uint32 NOINLINE find_image(void) {
 	ets_delay_us(BOOT_DELAY_MICROS);
 #endif

-	ets_printf("\r\nrBoot v1.4.2 - richardaburton@gmail.com\r\n");
+#ifndef BOOT_SILENT
+#define echof(fmt, ...) ets_printf(fmt, ##__VA_ARGS__)
+#else
+#define echof(fmt, ...)
+#endif
+
+	echof("\r\nrBoot v1.4.2 - richardaburton@gmail.com\r\n");

 	// read rom header
 	SPIRead(0, header, sizeof(rom_header));

 	// print and get flash size
-	ets_printf("Flash Size:   ");
+	echof("Flash Size:   ");
 	flag = header->flags2 >> 4;
 	if (flag == 0) {
-		ets_printf("4 Mbit\r\n");
+		echof("4 Mbit\r\n");
 		flashsize = 0x80000;
 	} else if (flag == 1) {
-		ets_printf("2 Mbit\r\n");
+		echof("2 Mbit\r\n");
 		flashsize = 0x40000;
 	} else if (flag == 2) {
-		ets_printf("8 Mbit\r\n");
+		echof("8 Mbit\r\n");
 		flashsize = 0x100000;
 	} else if (flag == 3) {
-		ets_printf("16 Mbit\r\n");
+		echof("16 Mbit\r\n");
 #ifdef BOOT_BIG_FLASH
 		flashsize = 0x200000;
 #else
 		flashsize = 0x100000; // limit to 8Mbit
 #endif
 	} else if (flag == 4) {
-		ets_printf("32 Mbit\r\n");
+		echof("32 Mbit\r\n");
 #ifdef BOOT_BIG_FLASH
 		flashsize = 0x400000;
 #else
 		flashsize = 0x100000; // limit to 8Mbit
 #endif
 	} else {
-		ets_printf("unknown\r\n");
+		echof("unknown\r\n");
 		// assume at least 4mbit
 		flashsize = 0x80000;
 	}

 	// print spi mode
-	ets_printf("Flash Mode:   ");
+	echof("Flash Mode:   ");
 	if (header->flags1 == 0) {
-		ets_printf("QIO\r\n");
+		echof("QIO\r\n");
 	} else if (header->flags1 == 1) {
-		ets_printf("QOUT\r\n");
+		echof("QOUT\r\n");
 	} else if (header->flags1 == 2) {
-		ets_printf("DIO\r\n");
+		echof("DIO\r\n");
 	} else if (header->flags1 == 3) {
-		ets_printf("DOUT\r\n");
+		echof("DOUT\r\n");
 	} else {
-		ets_printf("unknown\r\n");
+		echof("unknown\r\n");
 	}

 	// print spi speed
-	ets_printf("Flash Speed:  ");
+	echof("Flash Speed:  ");
 	flag = header->flags2 & 0x0f;
-	if (flag == 0) ets_printf("40 MHz\r\n");
-	else if (flag == 1) ets_printf("26.7 MHz\r\n");
-	else if (flag == 2) ets_printf("20 MHz\r\n");
-	else if (flag == 0x0f) ets_printf("80 MHz\r\n");
-	else ets_printf("unknown\r\n");
+	if (flag == 0) echof("40 MHz\r\n");
+	else if (flag == 1) echof("26.7 MHz\r\n");
+	else if (flag == 2) echof("20 MHz\r\n");
+	else if (flag == 0x0f) echof("80 MHz\r\n");
+	else echof("unknown\r\n");

 	// print enabled options
 #ifdef BOOT_BIG_FLASH
-	ets_printf("rBoot Option: Big flash\r\n");
+	echof("rBoot Option: Big flash\r\n");
 #endif
 #ifdef BOOT_CONFIG_CHKSUM
-	ets_printf("rBoot Option: Config chksum\r\n");
+	echof("rBoot Option: Config chksum\r\n");
 #endif
 #ifdef BOOT_GPIO_ENABLED
-	ets_printf("rBoot Option: GPIO rom mode (%d)\r\n", BOOT_GPIO_NUM);
+	echof("rBoot Option: GPIO rom mode (%d)\r\n", BOOT_GPIO_NUM);
 #endif
 #ifdef BOOT_GPIO_SKIP_ENABLED
-	ets_printf("rBoot Option: GPIO skip mode (%d)\r\n", BOOT_GPIO_NUM);
+	echof("rBoot Option: GPIO skip mode (%d)\r\n", BOOT_GPIO_NUM);
 #endif
 #ifdef BOOT_RTC_ENABLED
-	ets_printf("rBoot Option: RTC data\r\n");
+	echof("rBoot Option: RTC data\r\n");
 #endif
 #ifdef BOOT_IROM_CHKSUM
-	ets_printf("rBoot Option: irom chksum\r\n");
+	echof("rBoot Option: irom chksum\r\n");
 #endif
-	ets_printf("\r\n");
+	echof("\r\n");
+
+#undef echof

 	// read boot config
 	SPIRead(BOOT_CONFIG_SECTOR * SECTOR_SIZE, buffer, SECTOR_SIZE);
diff --git a/rboot.h b/rboot.h
index 93ae317..bd3ad6d 100644
--- a/rboot.h
+++ b/rboot.h
@@ -34,7 +34,7 @@ extern "C" {
 // uncomment to enable GPIO rom skip mode, trigger
 // GPIO at boot time to skip to next rom
 // cannot be used at same time as BOOT_GPIO_ENABLED
-#define BOOT_GPIO_SKIP_ENABLED
+//#define BOOT_GPIO_SKIP_ENABLED

 // set the GPIO pin used by GPIO modes above (will default
 // to 16 if not manually set), only applicable when
