diff --git a/gdbstub.c b/gdbstub.c
index 5fc6633..1df3b9c 100644
--- a/gdbstub.c
+++ b/gdbstub.c
@@ -8,6 +8,7 @@
  *******************************************************************************/
 
 #include "gdbstub.h"
+#include <user_config.h>
 #include "ets_sys.h"
 #include "eagle_soc.h"
 #include "c_types.h"
@@ -72,6 +73,10 @@ the xthal stack frame struct.
 
 void _xtos_set_exception_handler(int cause, void (exhandler)(struct XTensa_exception_frame_s *frame));
 int os_printf_plus(const char *format, ...)  __attribute__ ((format (printf, 1, 2)));
+void xthal_set_intenable(unsigned);
+
+extern void ets_wdt_enable(void);
+extern void ets_wdt_disable(void);
 
 #endif
 
@@ -575,6 +580,7 @@ void ATTR_GDBFN gdbstub_handle_debug_exception() {
 	}
 
 	sendReason();
+	xthal_set_intenable(0); // enable receiving UART bytes without interrupts
 	while(gdbReadCommand()!=ST_CONT);
 	if ((gdbstub_savedRegs.reason&0x84)==0x4) {
 		//We stopped due to a watchpoint. We can't re-execute the current instruction
@@ -627,6 +633,7 @@ static void ATTR_GDBFN gdb_exception_handler(struct XTensa_exception_frame_s *fr
 
 	ets_wdt_disable();
 	sendReason();
+	xthal_set_intenable(0); // enable receiving UART bytes without interrupts
 	while(gdbReadCommand()!=ST_CONT);
 	ets_wdt_enable();
 
@@ -706,6 +713,7 @@ static void ATTR_GDBFN uart_hdlr(void *arg, void *frame) {
 	
 		ets_wdt_disable();
 		sendReason();
+		xthal_set_intenable(0); // enable receiving UART bytes without interrupts
 		while(gdbReadCommand()!=ST_CONT);
 		ets_wdt_enable();
 		//Copy any changed registers back to the frame the Xtensa HAL uses.
@@ -714,7 +722,7 @@ static void ATTR_GDBFN uart_hdlr(void *arg, void *frame) {
 }
 
 static void ATTR_GDBINIT install_uart_hdlr() {
-	ets_isr_attach(ETS_UART_INUM, uart_hdlr, NULL);
+	ets_isr_attach(ETS_UART_INUM, (ets_isr_t)uart_hdlr, NULL);
 	SET_PERI_REG_MASK(UART_INT_ENA(0), UART_RXFIFO_FULL_INT_ENA|UART_RXFIFO_TOUT_INT_ENA);
 	ets_isr_unmask((1<<ETS_UART_INUM)); //enable uart interrupt
 }
