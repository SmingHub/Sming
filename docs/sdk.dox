// This file documents elements of the SDK used by Sming that are insufficiently documented within the SDK source files.


/**	@enum	GPIO_INT_TYPE
	@ingroup constants
	@brief	Defines the GPIO interrupt type

	@var	GPIO_INT_TYPE::GPIO_PIN_INTR_DISABLE
			Interrupt disabled for this pin
	@var	GPIO_INT_TYPE::GPIO_PIN_INTR_POSEDGE
			Interrupt occurs on positive edge
	@var	GPIO_INT_TYPE::GPIO_PIN_INTR_NEGEDGE
			Interrupt occurs on negative edge
	@var	GPIO_INT_TYPE::GPIO_PIN_INTR_ANYEDGE
			Interrupt occurs on both positive and negative edge
	@var	GPIO_INT_TYPE::GPIO_PIN_INTR_LOLEVEL
			Interrupt occurs when GPIO low
	@var	GPIO_INT_TYPE::GPIO_PIN_INTR_HILEVEL
			Interrupt occurs when GPIO high
 */

/** @defgroup print Print stream functions
    @brief  Provides functions that format output to streams, e.g. Serial
    @{
    @class  Print
    @brief  Provides formatted output to stream
    @}

    @fn     int Print::getWriteError()
    @brief  Gets last error
    @retval int Error number of last write error

    @fn     void Print::clearWriteError()
    @brief  Clears the last write error

    @fn     size_t Print::write(uint8_t)
    @brief  Writes a single character to output stream
    @param  uint8_t Character to write to output stream
    @retval size_t Quantity of characters written to output stream

    @fn     size_t Print::print(const char[])
    @brief  Prints a c-string to output stream
    @param  char[] c-string to print
    @retval size_t Quantity of characters written to output stream

    @fn     size_t Print::print(double, int = 2)
    @brief  Prints number to output stream
    @param  double Number to print
    @param  int Decimal places to show
    @retval size_t Quantity of characters written to output stream

    @fn     size_t Print::print(long)
    @brief  Prints integer to output stream
    @param  long Integer to print
    @retval size_t Quantity of characters written to output stream

    @fn     size_t Print::println()
    @param  Prints newline to output stream
    @retval size_t Quantity of characters written to output stream

    @fn     size_t Print::write(const char *str)
    @brief  Writes a c-string to output stream
    @param  str Pointer to c-string
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::write(const uint8_t *buffer, size_t size)
    @brief  Writes characters from a buffer to output stream
    @param  buffer Pointer to character buffer
    @param  size Quantity of characters to write
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::write(const char *buffer, size_t size)
    @brief  Writes characters from a buffer to output stream
    @param  buffer Pointer to character buffer
    @param  size Quantity of characters to write
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::print(char)
    @brief  Prints a single character to output stream
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::print(const char[])
    @brief  Prints a c-string to output stream
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::print(unsigned long, int base = DEC)
    @brief  Prints a number to output stream
    @param  "unsigned long" Number to print
    @param  base The base for output (Default: Decimal (base 10))
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::print(long, int base = DEC)
    @brief  Prints a number to output stream
    @param  "long" Number to print
    @param  base The base for output (Default: Decimal (base 10))
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::print(unsigned int, int base = DEC)
    @brief  Prints a number to output stream
    @param  "unsigned int" Number to print
    @param  base The base for output (Default: Decimal (base 10))
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::print(unsigned char, int base = DEC)
    @brief  Prints a number to output stream
    @param  "unsigned char" Number to print
    @param  base The base for output (Default: Decimal (base 10))
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::print(int, int base = DEC)
    @brief  Prints a number to output stream
    @param  "int" Number to print
    @param  base The base for output (Default: Decimal (base 10))
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::print(double, int digits = 2)
    @brief  Prints a number to output stream
    @param  "double" Number to print
    @param  digits The decimal places to print (Default: 2, e.g. 21.35)
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::print(const Printable &p)
    @brief  Prints a Printable object to output stream
    @param  p Object to print
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::print(const String &s)
    @brief  Prints a String to output stream
    @param  s String to print
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::println(void)
    @brief  Prints a newline to output stream
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::println(const char[])
    @brief  Prints a c-string to output stream, appending newline
    @param  "char[]" c-string to print
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::println(char)
    @brief  Prints a single character to output stream, appending newline
    @param  "char" Character to print
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::println(unsigned char, int base = DEC)
    @brief  Prints a number to output stream, appending newline
    @param  "unsigned char" Number to print
    @param  base The base for output (Default: Decimal (base 10))
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::println(unsigned int, int base = DEC)
    @brief  Prints a number to output stream, appending newline
    @param  "unsigned int" Number to print
    @param  base The base for output (Default: Decimal (base 10))
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::println(unsigned long, int base = DEC)
    @brief  Prints a number to output stream, appending newline
    @param  "unsigned long" Number to print
    @param  base The base for output (Default: Decimal (base 10))
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::println(int, int base = DEC)
    @brief  Prints a number to output stream, appending newline
    @param  "int" Number to print
    @param  base The base for output (Default: Decimal (base 10))
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::println(long, int base = DEC)
    @brief  Prints a number to output stream, appending newline
    @param  "long" Number to print
    @param  base The base for output (Default: Decimal (base 10))
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::println(double, int digits = 2)
    @brief  Prints a number to output stream, appending newline
    @param  "double" Number to print
    @param  digits The decimal places to print (Default: 2, e.g. 21.35)
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::println(const Printable &p)
    @brief  Prints a Printable object to output stream, appending newline
    @param  p Object to print
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::println(const String &s)
    @brief  Prints a String to output stream, appending newline
    @param  s String to print
    @retval size_t Quantity of characters written to stream

    @fn     size_t Print::printf(const char *fmt, ...);
    @brief  Prints a formatted c-string to output stream
    @param  fmt Pointer to formated c-string to print
    @param  "..." Parameters for placeholders within formated string
    @retval size_t Quantity of characters written to stream
    @note   Use standard printf placeholders, e.g. %d for integer, %s for c-string, etc.
*/

